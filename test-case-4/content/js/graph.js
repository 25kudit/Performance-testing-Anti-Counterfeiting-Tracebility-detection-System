/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 34.0, "minX": 0.0, "maxY": 21798.0, "series": [{"data": [[0.0, 34.0], [0.1, 34.0], [0.2, 35.0], [0.3, 36.0], [0.4, 36.0], [0.5, 37.0], [0.6, 39.0], [0.7, 41.0], [0.8, 42.0], [0.9, 43.0], [1.0, 44.0], [1.1, 44.0], [1.2, 44.0], [1.3, 45.0], [1.4, 45.0], [1.5, 45.0], [1.6, 46.0], [1.7, 46.0], [1.8, 46.0], [1.9, 46.0], [2.0, 46.0], [2.1, 46.0], [2.2, 47.0], [2.3, 47.0], [2.4, 47.0], [2.5, 48.0], [2.6, 48.0], [2.7, 48.0], [2.8, 48.0], [2.9, 49.0], [3.0, 49.0], [3.1, 49.0], [3.2, 49.0], [3.3, 50.0], [3.4, 50.0], [3.5, 50.0], [3.6, 50.0], [3.7, 50.0], [3.8, 51.0], [3.9, 51.0], [4.0, 51.0], [4.1, 51.0], [4.2, 51.0], [4.3, 52.0], [4.4, 52.0], [4.5, 52.0], [4.6, 52.0], [4.7, 52.0], [4.8, 52.0], [4.9, 52.0], [5.0, 53.0], [5.1, 53.0], [5.2, 53.0], [5.3, 53.0], [5.4, 53.0], [5.5, 53.0], [5.6, 54.0], [5.7, 54.0], [5.8, 54.0], [5.9, 54.0], [6.0, 54.0], [6.1, 54.0], [6.2, 54.0], [6.3, 54.0], [6.4, 55.0], [6.5, 55.0], [6.6, 55.0], [6.7, 55.0], [6.8, 55.0], [6.9, 55.0], [7.0, 55.0], [7.1, 56.0], [7.2, 56.0], [7.3, 56.0], [7.4, 56.0], [7.5, 56.0], [7.6, 56.0], [7.7, 56.0], [7.8, 56.0], [7.9, 56.0], [8.0, 57.0], [8.1, 57.0], [8.2, 57.0], [8.3, 57.0], [8.4, 57.0], [8.5, 57.0], [8.6, 57.0], [8.7, 57.0], [8.8, 58.0], [8.9, 58.0], [9.0, 58.0], [9.1, 58.0], [9.2, 58.0], [9.3, 58.0], [9.4, 58.0], [9.5, 58.0], [9.6, 58.0], [9.7, 58.0], [9.8, 59.0], [9.9, 59.0], [10.0, 59.0], [10.1, 59.0], [10.2, 59.0], [10.3, 59.0], [10.4, 59.0], [10.5, 60.0], [10.6, 60.0], [10.7, 60.0], [10.8, 60.0], [10.9, 60.0], [11.0, 60.0], [11.1, 60.0], [11.2, 60.0], [11.3, 60.0], [11.4, 61.0], [11.5, 61.0], [11.6, 61.0], [11.7, 61.0], [11.8, 61.0], [11.9, 61.0], [12.0, 61.0], [12.1, 61.0], [12.2, 61.0], [12.3, 61.0], [12.4, 61.0], [12.5, 61.0], [12.6, 62.0], [12.7, 62.0], [12.8, 62.0], [12.9, 62.0], [13.0, 62.0], [13.1, 62.0], [13.2, 62.0], [13.3, 62.0], [13.4, 62.0], [13.5, 62.0], [13.6, 62.0], [13.7, 63.0], [13.8, 63.0], [13.9, 63.0], [14.0, 63.0], [14.1, 63.0], [14.2, 63.0], [14.3, 63.0], [14.4, 63.0], [14.5, 63.0], [14.6, 63.0], [14.7, 63.0], [14.8, 63.0], [14.9, 64.0], [15.0, 64.0], [15.1, 64.0], [15.2, 64.0], [15.3, 64.0], [15.4, 64.0], [15.5, 64.0], [15.6, 64.0], [15.7, 64.0], [15.8, 64.0], [15.9, 64.0], [16.0, 64.0], [16.1, 65.0], [16.2, 65.0], [16.3, 65.0], [16.4, 65.0], [16.5, 65.0], [16.6, 65.0], [16.7, 65.0], [16.8, 65.0], [16.9, 65.0], [17.0, 65.0], [17.1, 65.0], [17.2, 66.0], [17.3, 66.0], [17.4, 66.0], [17.5, 66.0], [17.6, 66.0], [17.7, 66.0], [17.8, 66.0], [17.9, 66.0], [18.0, 66.0], [18.1, 66.0], [18.2, 66.0], [18.3, 67.0], [18.4, 67.0], [18.5, 67.0], [18.6, 67.0], [18.7, 67.0], [18.8, 67.0], [18.9, 67.0], [19.0, 67.0], [19.1, 67.0], [19.2, 67.0], [19.3, 67.0], [19.4, 67.0], [19.5, 67.0], [19.6, 68.0], [19.7, 68.0], [19.8, 68.0], [19.9, 68.0], [20.0, 68.0], [20.1, 68.0], [20.2, 68.0], [20.3, 68.0], [20.4, 68.0], [20.5, 68.0], [20.6, 68.0], [20.7, 68.0], [20.8, 68.0], [20.9, 68.0], [21.0, 68.0], [21.1, 69.0], [21.2, 69.0], [21.3, 69.0], [21.4, 69.0], [21.5, 69.0], [21.6, 69.0], [21.7, 69.0], [21.8, 69.0], [21.9, 69.0], [22.0, 69.0], [22.1, 69.0], [22.2, 69.0], [22.3, 69.0], [22.4, 69.0], [22.5, 69.0], [22.6, 70.0], [22.7, 70.0], [22.8, 70.0], [22.9, 70.0], [23.0, 70.0], [23.1, 70.0], [23.2, 70.0], [23.3, 70.0], [23.4, 70.0], [23.5, 70.0], [23.6, 70.0], [23.7, 70.0], [23.8, 70.0], [23.9, 70.0], [24.0, 71.0], [24.1, 71.0], [24.2, 71.0], [24.3, 71.0], [24.4, 71.0], [24.5, 71.0], [24.6, 71.0], [24.7, 71.0], [24.8, 71.0], [24.9, 71.0], [25.0, 71.0], [25.1, 71.0], [25.2, 71.0], [25.3, 71.0], [25.4, 71.0], [25.5, 71.0], [25.6, 71.0], [25.7, 72.0], [25.8, 72.0], [25.9, 72.0], [26.0, 72.0], [26.1, 72.0], [26.2, 72.0], [26.3, 72.0], [26.4, 72.0], [26.5, 72.0], [26.6, 72.0], [26.7, 72.0], [26.8, 72.0], [26.9, 72.0], [27.0, 72.0], [27.1, 72.0], [27.2, 73.0], [27.3, 73.0], [27.4, 73.0], [27.5, 73.0], [27.6, 73.0], [27.7, 73.0], [27.8, 73.0], [27.9, 73.0], [28.0, 73.0], [28.1, 73.0], [28.2, 73.0], [28.3, 73.0], [28.4, 73.0], [28.5, 73.0], [28.6, 73.0], [28.7, 74.0], [28.8, 74.0], [28.9, 74.0], [29.0, 74.0], [29.1, 74.0], [29.2, 74.0], [29.3, 74.0], [29.4, 74.0], [29.5, 74.0], [29.6, 74.0], [29.7, 74.0], [29.8, 74.0], [29.9, 74.0], [30.0, 74.0], [30.1, 75.0], [30.2, 75.0], [30.3, 75.0], [30.4, 75.0], [30.5, 75.0], [30.6, 75.0], [30.7, 75.0], [30.8, 75.0], [30.9, 75.0], [31.0, 75.0], [31.1, 75.0], [31.2, 75.0], [31.3, 75.0], [31.4, 76.0], [31.5, 76.0], [31.6, 76.0], [31.7, 76.0], [31.8, 76.0], [31.9, 76.0], [32.0, 76.0], [32.1, 76.0], [32.2, 76.0], [32.3, 76.0], [32.4, 76.0], [32.5, 76.0], [32.6, 76.0], [32.7, 76.0], [32.8, 76.0], [32.9, 77.0], [33.0, 77.0], [33.1, 77.0], [33.2, 77.0], [33.3, 77.0], [33.4, 77.0], [33.5, 77.0], [33.6, 77.0], [33.7, 77.0], [33.8, 77.0], [33.9, 77.0], [34.0, 77.0], [34.1, 77.0], [34.2, 77.0], [34.3, 77.0], [34.4, 78.0], [34.5, 78.0], [34.6, 78.0], [34.7, 78.0], [34.8, 78.0], [34.9, 78.0], [35.0, 78.0], [35.1, 78.0], [35.2, 78.0], [35.3, 78.0], [35.4, 78.0], [35.5, 78.0], [35.6, 78.0], [35.7, 78.0], [35.8, 78.0], [35.9, 78.0], [36.0, 78.0], [36.1, 79.0], [36.2, 79.0], [36.3, 79.0], [36.4, 79.0], [36.5, 79.0], [36.6, 79.0], [36.7, 79.0], [36.8, 79.0], [36.9, 79.0], [37.0, 79.0], [37.1, 79.0], [37.2, 79.0], [37.3, 79.0], [37.4, 79.0], [37.5, 79.0], [37.6, 80.0], [37.7, 80.0], [37.8, 80.0], [37.9, 80.0], [38.0, 80.0], [38.1, 80.0], [38.2, 80.0], [38.3, 80.0], [38.4, 80.0], [38.5, 80.0], [38.6, 80.0], [38.7, 80.0], [38.8, 80.0], [38.9, 80.0], [39.0, 80.0], [39.1, 80.0], [39.2, 81.0], [39.3, 81.0], [39.4, 81.0], [39.5, 81.0], [39.6, 81.0], [39.7, 81.0], [39.8, 81.0], [39.9, 81.0], [40.0, 81.0], [40.1, 81.0], [40.2, 81.0], [40.3, 81.0], [40.4, 81.0], [40.5, 81.0], [40.6, 81.0], [40.7, 81.0], [40.8, 81.0], [40.9, 81.0], [41.0, 82.0], [41.1, 82.0], [41.2, 82.0], [41.3, 82.0], [41.4, 82.0], [41.5, 82.0], [41.6, 82.0], [41.7, 82.0], [41.8, 82.0], [41.9, 82.0], [42.0, 82.0], [42.1, 82.0], [42.2, 82.0], [42.3, 82.0], [42.4, 82.0], [42.5, 82.0], [42.6, 83.0], [42.7, 83.0], [42.8, 83.0], [42.9, 83.0], [43.0, 83.0], [43.1, 83.0], [43.2, 83.0], [43.3, 83.0], [43.4, 83.0], [43.5, 83.0], [43.6, 83.0], [43.7, 83.0], [43.8, 83.0], [43.9, 83.0], [44.0, 83.0], [44.1, 84.0], [44.2, 84.0], [44.3, 84.0], [44.4, 84.0], [44.5, 84.0], [44.6, 84.0], [44.7, 84.0], [44.8, 84.0], [44.9, 84.0], [45.0, 84.0], [45.1, 84.0], [45.2, 85.0], [45.3, 85.0], [45.4, 85.0], [45.5, 85.0], [45.6, 85.0], [45.7, 85.0], [45.8, 85.0], [45.9, 85.0], [46.0, 85.0], [46.1, 85.0], [46.2, 85.0], [46.3, 85.0], [46.4, 86.0], [46.5, 86.0], [46.6, 86.0], [46.7, 86.0], [46.8, 86.0], [46.9, 86.0], [47.0, 86.0], [47.1, 86.0], [47.2, 86.0], [47.3, 86.0], [47.4, 86.0], [47.5, 86.0], [47.6, 87.0], [47.7, 87.0], [47.8, 87.0], [47.9, 87.0], [48.0, 87.0], [48.1, 87.0], [48.2, 87.0], [48.3, 87.0], [48.4, 87.0], [48.5, 87.0], [48.6, 87.0], [48.7, 87.0], [48.8, 88.0], [48.9, 88.0], [49.0, 88.0], [49.1, 88.0], [49.2, 88.0], [49.3, 88.0], [49.4, 88.0], [49.5, 88.0], [49.6, 88.0], [49.7, 88.0], [49.8, 88.0], [49.9, 88.0], [50.0, 89.0], [50.1, 89.0], [50.2, 89.0], [50.3, 89.0], [50.4, 89.0], [50.5, 89.0], [50.6, 89.0], [50.7, 89.0], [50.8, 89.0], [50.9, 89.0], [51.0, 90.0], [51.1, 90.0], [51.2, 90.0], [51.3, 90.0], [51.4, 90.0], [51.5, 90.0], [51.6, 90.0], [51.7, 90.0], [51.8, 90.0], [51.9, 90.0], [52.0, 90.0], [52.1, 91.0], [52.2, 91.0], [52.3, 91.0], [52.4, 91.0], [52.5, 91.0], [52.6, 91.0], [52.7, 91.0], [52.8, 91.0], [52.9, 91.0], [53.0, 91.0], [53.1, 92.0], [53.2, 92.0], [53.3, 92.0], [53.4, 92.0], [53.5, 92.0], [53.6, 92.0], [53.7, 92.0], [53.8, 92.0], [53.9, 93.0], [54.0, 93.0], [54.1, 93.0], [54.2, 93.0], [54.3, 93.0], [54.4, 93.0], [54.5, 93.0], [54.6, 93.0], [54.7, 93.0], [54.8, 94.0], [54.9, 94.0], [55.0, 94.0], [55.1, 94.0], [55.2, 94.0], [55.3, 94.0], [55.4, 94.0], [55.5, 94.0], [55.6, 95.0], [55.7, 95.0], [55.8, 95.0], [55.9, 95.0], [56.0, 95.0], [56.1, 96.0], [56.2, 96.0], [56.3, 96.0], [56.4, 96.0], [56.5, 96.0], [56.6, 97.0], [56.7, 97.0], [56.8, 97.0], [56.9, 97.0], [57.0, 97.0], [57.1, 97.0], [57.2, 97.0], [57.3, 98.0], [57.4, 98.0], [57.5, 98.0], [57.6, 98.0], [57.7, 98.0], [57.8, 99.0], [57.9, 99.0], [58.0, 99.0], [58.1, 99.0], [58.2, 99.0], [58.3, 100.0], [58.4, 100.0], [58.5, 100.0], [58.6, 100.0], [58.7, 100.0], [58.8, 101.0], [58.9, 101.0], [59.0, 101.0], [59.1, 101.0], [59.2, 102.0], [59.3, 102.0], [59.4, 102.0], [59.5, 102.0], [59.6, 103.0], [59.7, 103.0], [59.8, 104.0], [59.9, 104.0], [60.0, 104.0], [60.1, 104.0], [60.2, 105.0], [60.3, 105.0], [60.4, 105.0], [60.5, 106.0], [60.6, 106.0], [60.7, 107.0], [60.8, 107.0], [60.9, 107.0], [61.0, 108.0], [61.1, 108.0], [61.2, 108.0], [61.3, 109.0], [61.4, 109.0], [61.5, 110.0], [61.6, 110.0], [61.7, 111.0], [61.8, 111.0], [61.9, 111.0], [62.0, 112.0], [62.1, 113.0], [62.2, 113.0], [62.3, 113.0], [62.4, 114.0], [62.5, 114.0], [62.6, 114.0], [62.7, 115.0], [62.8, 115.0], [62.9, 115.0], [63.0, 116.0], [63.1, 116.0], [63.2, 117.0], [63.3, 117.0], [63.4, 117.0], [63.5, 118.0], [63.6, 118.0], [63.7, 119.0], [63.8, 119.0], [63.9, 120.0], [64.0, 120.0], [64.1, 121.0], [64.2, 121.0], [64.3, 121.0], [64.4, 122.0], [64.5, 122.0], [64.6, 122.0], [64.7, 122.0], [64.8, 123.0], [64.9, 124.0], [65.0, 124.0], [65.1, 125.0], [65.2, 125.0], [65.3, 126.0], [65.4, 126.0], [65.5, 127.0], [65.6, 127.0], [65.7, 127.0], [65.8, 128.0], [65.9, 128.0], [66.0, 129.0], [66.1, 129.0], [66.2, 129.0], [66.3, 130.0], [66.4, 130.0], [66.5, 131.0], [66.6, 131.0], [66.7, 132.0], [66.8, 132.0], [66.9, 132.0], [67.0, 133.0], [67.1, 133.0], [67.2, 134.0], [67.3, 134.0], [67.4, 135.0], [67.5, 135.0], [67.6, 136.0], [67.7, 136.0], [67.8, 137.0], [67.9, 137.0], [68.0, 138.0], [68.1, 138.0], [68.2, 138.0], [68.3, 139.0], [68.4, 139.0], [68.5, 140.0], [68.6, 141.0], [68.7, 142.0], [68.8, 143.0], [68.9, 144.0], [69.0, 144.0], [69.1, 145.0], [69.2, 146.0], [69.3, 148.0], [69.4, 149.0], [69.5, 150.0], [69.6, 152.0], [69.7, 153.0], [69.8, 154.0], [69.9, 156.0], [70.0, 157.0], [70.1, 159.0], [70.2, 160.0], [70.3, 161.0], [70.4, 162.0], [70.5, 163.0], [70.6, 166.0], [70.7, 169.0], [70.8, 170.0], [70.9, 172.0], [71.0, 177.0], [71.1, 181.0], [71.2, 182.0], [71.3, 186.0], [71.4, 189.0], [71.5, 194.0], [71.6, 199.0], [71.7, 202.0], [71.8, 207.0], [71.9, 211.0], [72.0, 215.0], [72.1, 217.0], [72.2, 219.0], [72.3, 223.0], [72.4, 227.0], [72.5, 229.0], [72.6, 232.0], [72.7, 234.0], [72.8, 237.0], [72.9, 239.0], [73.0, 243.0], [73.1, 246.0], [73.2, 249.0], [73.3, 251.0], [73.4, 253.0], [73.5, 255.0], [73.6, 257.0], [73.7, 259.0], [73.8, 261.0], [73.9, 263.0], [74.0, 263.0], [74.1, 265.0], [74.2, 266.0], [74.3, 267.0], [74.4, 268.0], [74.5, 269.0], [74.6, 270.0], [74.7, 271.0], [74.8, 273.0], [74.9, 273.0], [75.0, 274.0], [75.1, 275.0], [75.2, 276.0], [75.3, 277.0], [75.4, 278.0], [75.5, 279.0], [75.6, 279.0], [75.7, 280.0], [75.8, 281.0], [75.9, 281.0], [76.0, 282.0], [76.1, 282.0], [76.2, 283.0], [76.3, 283.0], [76.4, 284.0], [76.5, 284.0], [76.6, 285.0], [76.7, 285.0], [76.8, 286.0], [76.9, 286.0], [77.0, 287.0], [77.1, 287.0], [77.2, 288.0], [77.3, 288.0], [77.4, 289.0], [77.5, 289.0], [77.6, 290.0], [77.7, 290.0], [77.8, 291.0], [77.9, 291.0], [78.0, 291.0], [78.1, 292.0], [78.2, 292.0], [78.3, 293.0], [78.4, 293.0], [78.5, 294.0], [78.6, 294.0], [78.7, 295.0], [78.8, 295.0], [78.9, 296.0], [79.0, 297.0], [79.1, 297.0], [79.2, 298.0], [79.3, 298.0], [79.4, 299.0], [79.5, 299.0], [79.6, 300.0], [79.7, 301.0], [79.8, 302.0], [79.9, 302.0], [80.0, 303.0], [80.1, 303.0], [80.2, 304.0], [80.3, 305.0], [80.4, 306.0], [80.5, 307.0], [80.6, 309.0], [80.7, 310.0], [80.8, 310.0], [80.9, 311.0], [81.0, 312.0], [81.1, 313.0], [81.2, 314.0], [81.3, 316.0], [81.4, 317.0], [81.5, 318.0], [81.6, 320.0], [81.7, 321.0], [81.8, 322.0], [81.9, 323.0], [82.0, 325.0], [82.1, 326.0], [82.2, 328.0], [82.3, 329.0], [82.4, 330.0], [82.5, 331.0], [82.6, 333.0], [82.7, 334.0], [82.8, 337.0], [82.9, 340.0], [83.0, 342.0], [83.1, 344.0], [83.2, 346.0], [83.3, 348.0], [83.4, 349.0], [83.5, 351.0], [83.6, 353.0], [83.7, 355.0], [83.8, 356.0], [83.9, 358.0], [84.0, 360.0], [84.1, 363.0], [84.2, 365.0], [84.3, 368.0], [84.4, 370.0], [84.5, 372.0], [84.6, 374.0], [84.7, 379.0], [84.8, 383.0], [84.9, 391.0], [85.0, 396.0], [85.1, 402.0], [85.2, 412.0], [85.3, 421.0], [85.4, 431.0], [85.5, 449.0], [85.6, 463.0], [85.7, 471.0], [85.8, 481.0], [85.9, 485.0], [86.0, 491.0], [86.1, 498.0], [86.2, 502.0], [86.3, 508.0], [86.4, 511.0], [86.5, 518.0], [86.6, 523.0], [86.7, 529.0], [86.8, 533.0], [86.9, 539.0], [87.0, 546.0], [87.1, 550.0], [87.2, 558.0], [87.3, 562.0], [87.4, 567.0], [87.5, 574.0], [87.6, 580.0], [87.7, 594.0], [87.8, 601.0], [87.9, 615.0], [88.0, 625.0], [88.1, 646.0], [88.2, 668.0], [88.3, 694.0], [88.4, 712.0], [88.5, 733.0], [88.6, 747.0], [88.7, 761.0], [88.8, 776.0], [88.9, 788.0], [89.0, 801.0], [89.1, 816.0], [89.2, 856.0], [89.3, 867.0], [89.4, 878.0], [89.5, 894.0], [89.6, 914.0], [89.7, 929.0], [89.8, 945.0], [89.9, 963.0], [90.0, 980.0], [90.1, 1004.0], [90.2, 1021.0], [90.3, 1044.0], [90.4, 1063.0], [90.5, 1080.0], [90.6, 1099.0], [90.7, 1120.0], [90.8, 1144.0], [90.9, 1170.0], [91.0, 1181.0], [91.1, 1193.0], [91.2, 1206.0], [91.3, 1215.0], [91.4, 1230.0], [91.5, 1242.0], [91.6, 1256.0], [91.7, 1270.0], [91.8, 1285.0], [91.9, 1295.0], [92.0, 1314.0], [92.1, 1323.0], [92.2, 1334.0], [92.3, 1351.0], [92.4, 1363.0], [92.5, 1374.0], [92.6, 1382.0], [92.7, 1390.0], [92.8, 1400.0], [92.9, 1414.0], [93.0, 1437.0], [93.1, 1447.0], [93.2, 1469.0], [93.3, 1493.0], [93.4, 1510.0], [93.5, 1530.0], [93.6, 1552.0], [93.7, 1566.0], [93.8, 1585.0], [93.9, 1630.0], [94.0, 1650.0], [94.1, 1661.0], [94.2, 1692.0], [94.3, 1722.0], [94.4, 1746.0], [94.5, 1765.0], [94.6, 1791.0], [94.7, 1819.0], [94.8, 1852.0], [94.9, 1877.0], [95.0, 1914.0], [95.1, 1961.0], [95.2, 1995.0], [95.3, 2037.0], [95.4, 2090.0], [95.5, 2142.0], [95.6, 2176.0], [95.7, 2214.0], [95.8, 2285.0], [95.9, 2401.0], [96.0, 2440.0], [96.1, 2502.0], [96.2, 2546.0], [96.3, 2654.0], [96.4, 2825.0], [96.5, 2953.0], [96.6, 3049.0], [96.7, 3160.0], [96.8, 3199.0], [96.9, 3247.0], [97.0, 3265.0], [97.1, 3316.0], [97.2, 3362.0], [97.3, 3458.0], [97.4, 3552.0], [97.5, 3600.0], [97.6, 3678.0], [97.7, 3793.0], [97.8, 3903.0], [97.9, 3947.0], [98.0, 4014.0], [98.1, 4159.0], [98.2, 4335.0], [98.3, 4582.0], [98.4, 4762.0], [98.5, 5031.0], [98.6, 5226.0], [98.7, 5418.0], [98.8, 5700.0], [98.9, 6112.0], [99.0, 6341.0], [99.1, 6604.0], [99.2, 6819.0], [99.3, 7186.0], [99.4, 7331.0], [99.5, 7609.0], [99.6, 8145.0], [99.7, 8953.0], [99.8, 9844.0], [99.9, 11875.0], [100.0, 21798.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 5824.0, "series": [{"data": [[0.0, 5824.0], [100.0, 1336.0], [200.0, 793.0], [300.0, 555.0], [400.0, 107.0], [500.0, 163.0], [600.0, 55.0], [700.0, 65.0], [800.0, 55.0], [900.0, 55.0], [1000.0, 52.0], [1100.0, 57.0], [1200.0, 75.0], [1300.0, 87.0], [1400.0, 52.0], [1500.0, 51.0], [1600.0, 42.0], [1700.0, 39.0], [1800.0, 32.0], [1900.0, 25.0], [2000.0, 22.0], [2100.0, 21.0], [2200.0, 18.0], [2300.0, 8.0], [2400.0, 20.0], [2500.0, 16.0], [2600.0, 10.0], [2700.0, 3.0], [2800.0, 6.0], [2900.0, 9.0], [3000.0, 10.0], [3100.0, 17.0], [3200.0, 26.0], [3300.0, 16.0], [3400.0, 11.0], [3500.0, 16.0], [3700.0, 10.0], [3600.0, 12.0], [3800.0, 8.0], [3900.0, 19.0], [4000.0, 6.0], [4100.0, 10.0], [4200.0, 2.0], [4300.0, 5.0], [4600.0, 6.0], [4500.0, 7.0], [4400.0, 4.0], [4700.0, 3.0], [4800.0, 5.0], [5000.0, 3.0], [4900.0, 3.0], [5100.0, 5.0], [5200.0, 5.0], [5300.0, 7.0], [5500.0, 5.0], [5400.0, 3.0], [5600.0, 2.0], [5800.0, 4.0], [5700.0, 1.0], [5900.0, 4.0], [6100.0, 9.0], [6000.0, 1.0], [6300.0, 3.0], [6500.0, 6.0], [6600.0, 7.0], [6400.0, 2.0], [6700.0, 3.0], [6900.0, 3.0], [6800.0, 3.0], [7100.0, 7.0], [7400.0, 3.0], [7300.0, 5.0], [7200.0, 6.0], [7500.0, 3.0], [7600.0, 1.0], [7700.0, 1.0], [7800.0, 2.0], [7900.0, 3.0], [8100.0, 4.0], [8000.0, 1.0], [8200.0, 3.0], [8700.0, 2.0], [8300.0, 1.0], [8400.0, 1.0], [8500.0, 1.0], [9200.0, 3.0], [9100.0, 1.0], [8900.0, 2.0], [9400.0, 1.0], [9600.0, 1.0], [9300.0, 1.0], [9500.0, 1.0], [10100.0, 1.0], [9800.0, 2.0], [10200.0, 1.0], [10400.0, 1.0], [10600.0, 1.0], [11000.0, 1.0], [11500.0, 2.0], [12100.0, 2.0], [11800.0, 3.0], [12000.0, 1.0], [12300.0, 1.0], [12700.0, 1.0], [13800.0, 1.0], [15200.0, 1.0], [15800.0, 1.0], [21700.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 21700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 667.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 8615.0, "series": [{"data": [[0.0, 8615.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 718.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 667.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 279.0010062893077, "minX": 1.71483072E12, "maxY": 299.61195020746965, "series": [{"data": [[1.71483078E12, 279.0010062893077], [1.71483072E12, 299.61195020746965]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71483078E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 34.0, "minX": 1.0, "maxY": 7809.0, "series": [{"data": [[2.0, 2641.7692307692305], [3.0, 62.71428571428571], [4.0, 49.0], [5.0, 55.5], [6.0, 2446.0952380952376], [7.0, 50.5], [8.0, 51.0], [9.0, 60.18181818181819], [10.0, 48.0], [11.0, 1619.4], [12.0, 75.0], [14.0, 4215.875], [15.0, 453.41176470588243], [16.0, 55.666666666666664], [17.0, 61.333333333333336], [18.0, 1767.4999999999998], [20.0, 1799.2857142857142], [21.0, 1122.1304347826087], [22.0, 4480.571428571428], [23.0, 49.0], [24.0, 55.6], [25.0, 3991.333333333333], [26.0, 2341.8], [27.0, 46.0], [28.0, 920.4999999999999], [29.0, 50.0], [31.0, 609.375], [33.0, 1861.3333333333335], [32.0, 1472.7999999999997], [35.0, 695.7647058823528], [37.0, 92.66666666666667], [36.0, 1821.2666666666664], [39.0, 2149.5], [38.0, 1650.5], [41.0, 56.833333333333336], [40.0, 50.333333333333336], [43.0, 48.0], [42.0, 2286.6153846153848], [45.0, 73.5], [47.0, 56.0], [46.0, 51.666666666666664], [49.0, 55.0], [48.0, 45.0], [51.0, 38.0], [50.0, 35.0], [53.0, 7809.0], [52.0, 54.5], [55.0, 578.1500000000001], [54.0, 52.0], [57.0, 1881.6666666666665], [56.0, 46.357142857142854], [59.0, 37.0], [58.0, 69.58333333333334], [61.0, 54.0], [60.0, 2640.0], [62.0, 1643.4285714285713], [67.0, 53.0], [66.0, 1120.095238095238], [65.0, 77.0], [64.0, 72.33333333333333], [71.0, 1223.5714285714287], [69.0, 56.0], [75.0, 49.666666666666664], [74.0, 56.8], [72.0, 53.04166666666668], [79.0, 49.63636363636364], [78.0, 845.2857142857143], [77.0, 56.5], [76.0, 1717.4999999999998], [83.0, 3010.0], [81.0, 2722.466666666667], [80.0, 63.2], [87.0, 3619.6], [86.0, 52.0], [84.0, 566.7083333333334], [91.0, 3360.2500000000005], [90.0, 61.300000000000004], [89.0, 34.0], [88.0, 82.28571428571428], [95.0, 2418.333333333333], [94.0, 95.71428571428571], [93.0, 82.75], [99.0, 54.0], [98.0, 1187.3076923076924], [97.0, 61.0], [96.0, 57.666666666666664], [102.0, 51.400000000000006], [101.0, 54.72727272727273], [100.0, 2146.75], [107.0, 65.0], [106.0, 66.0], [105.0, 54.2], [104.0, 648.1666666666667], [111.0, 43.333333333333336], [110.0, 51.25], [109.0, 61.50000000000001], [108.0, 1544.6363636363633], [115.0, 1178.25], [114.0, 53.75], [113.0, 1370.681818181818], [112.0, 993.7500000000001], [119.0, 63.5], [118.0, 2970.0], [117.0, 48.5], [116.0, 1135.0], [123.0, 1569.75], [121.0, 53.5], [127.0, 52.3], [126.0, 53.0], [125.0, 53.0], [124.0, 1222.7], [135.0, 52.0], [134.0, 60.06666666666666], [133.0, 896.5], [132.0, 52.0], [131.0, 56.0], [130.0, 58.4], [128.0, 60.0], [143.0, 53.0], [142.0, 157.5], [141.0, 115.25], [140.0, 1711.24], [139.0, 70.5], [137.0, 64.0], [136.0, 63.6], [151.0, 47.0], [150.0, 372.7333333333334], [149.0, 68.88888888888887], [147.0, 66.0], [144.0, 48.0], [157.0, 64.5], [156.0, 61.5], [155.0, 219.63636363636363], [154.0, 975.9285714285716], [153.0, 912.1666666666666], [152.0, 2398.6666666666665], [167.0, 198.06250000000003], [165.0, 2406.625], [164.0, 54.333333333333336], [163.0, 98.2], [162.0, 93.5], [161.0, 53.125], [160.0, 61.2], [175.0, 59.0], [174.0, 67.00000000000001], [173.0, 1765.0000000000002], [171.0, 754.375], [170.0, 46.5], [169.0, 56.5], [168.0, 52.64705882352941], [183.0, 558.578947368421], [182.0, 1658.818181818182], [181.0, 64.0], [180.0, 297.6052631578947], [179.0, 1721.2857142857142], [178.0, 330.7826086956522], [177.0, 602.8000000000001], [176.0, 54.0], [189.0, 759.2307692307692], [190.0, 758.0000000000001], [191.0, 2058.5], [188.0, 2588.166666666667], [187.0, 3069.6], [186.0, 970.7142857142858], [185.0, 72.6], [184.0, 1292.6666666666665], [192.0, 1092.9166666666663], [193.0, 1395.0], [194.0, 920.0384615384613], [195.0, 969.0], [197.0, 799.1000000000003], [199.0, 332.8292682926829], [196.0, 62.0], [200.0, 448.0740740740741], [201.0, 136.38461538461533], [202.0, 1079.7999999999997], [203.0, 87.30769230769229], [204.0, 110.2], [206.0, 97.26086956521739], [208.0, 75.88888888888889], [211.0, 98.15384615384616], [212.0, 211.41176470588235], [213.0, 230.0625], [215.0, 465.16666666666663], [214.0, 7245.0], [210.0, 76.53846153846153], [209.0, 1225.2222222222224], [217.0, 502.40624999999994], [218.0, 450.00000000000006], [219.0, 585.4583333333334], [221.0, 617.8], [222.0, 166.83333333333334], [223.0, 82.16666666666667], [225.0, 105.05555555555554], [227.0, 426.686274509804], [229.0, 157.20833333333331], [230.0, 167.69230769230768], [231.0, 192.33333333333334], [228.0, 115.66666666666667], [226.0, 97.49999999999999], [224.0, 73.88888888888889], [232.0, 120.39999999999999], [233.0, 1124.3999999999999], [235.0, 280.75], [236.0, 378.9599999999999], [238.0, 209.65384615384622], [239.0, 251.41176470588235], [237.0, 416.45], [234.0, 61.4], [240.0, 136.3125], [241.0, 103.1153846153846], [242.0, 352.88888888888886], [243.0, 160.9333333333333], [244.0, 434.71999999999997], [245.0, 125.66666666666667], [246.0, 471.037037037037], [247.0, 339.0645161290322], [249.0, 113.17391304347825], [250.0, 73.33333333333333], [251.0, 134.56521739130437], [252.0, 102.66666666666669], [255.0, 124.50000000000001], [254.0, 510.1818181818182], [253.0, 695.6], [248.0, 67.0], [257.0, 75.00000000000001], [256.0, 285.3636363636364], [258.0, 114.25], [259.0, 537.0], [260.0, 89.0], [261.0, 240.26086956521735], [262.0, 259.4761904761904], [263.0, 1071.125], [265.0, 216.39999999999998], [271.0, 209.87804878048777], [269.0, 237.27272727272725], [268.0, 250.09890109890114], [270.0, 286.77777777777777], [266.0, 285.1025641025642], [267.0, 300.6630434782607], [273.0, 204.2783505154639], [272.0, 298.4659090909092], [274.0, 253.33846153846153], [275.0, 180.16969696969701], [276.0, 185.40170940170938], [277.0, 296.0679611650485], [278.0, 292.11029411764724], [279.0, 216.53968253968267], [280.0, 195.08148148148155], [286.0, 199.77215189873422], [287.0, 272.09230769230777], [285.0, 305.16911764705884], [284.0, 355.9666666666668], [281.0, 178.36607142857136], [282.0, 205.44999999999996], [283.0, 438.06382978723406], [289.0, 241.80487804878044], [288.0, 187.8208955223881], [291.0, 197.48717948717953], [290.0, 338.35714285714283], [293.0, 298.72727272727275], [292.0, 248.94444444444443], [295.0, 220.96666666666664], [294.0, 379.710843373494], [296.0, 265.89041095890406], [303.0, 181.64000000000001], [300.0, 244.04545454545448], [301.0, 276.9340659340659], [302.0, 427.3333333333334], [297.0, 314.0344827586207], [298.0, 256.68539325842704], [299.0, 388.2385321100918], [304.0, 430.92857142857144], [309.0, 246.6129032258065], [310.0, 730.0789473684209], [308.0, 161.1818181818182], [311.0, 274.4634146341463], [312.0, 334.50000000000017], [318.0, 246.42857142857142], [319.0, 784.5], [317.0, 648.1904761904763], [316.0, 364.6666666666667], [307.0, 66.00000000000001], [306.0, 1058.7083333333335], [305.0, 63.0], [313.0, 167.38888888888889], [315.0, 565.5454545454546], [314.0, 108.66666666666667], [323.0, 86.5], [320.0, 331.6923076923077], [321.0, 515.1923076923077], [322.0, 120.33333333333331], [324.0, 198.775], [325.0, 408.04545454545456], [326.0, 537.8], [327.0, 310.5], [331.0, 170.85714285714286], [330.0, 340.42857142857144], [332.0, 506.3571428571429], [333.0, 76.0], [334.0, 937.2666666666667], [335.0, 506.2142857142858], [329.0, 2127.4], [328.0, 1327.0], [337.0, 638.5384615384614], [336.0, 318.6842105263158], [338.0, 148.42857142857142], [339.0, 690.9999999999999], [349.0, 223.4186046511629], [350.0, 286.46153846153857], [351.0, 148.21212121212116], [348.0, 290.3333333333334], [342.0, 286.97101449275357], [343.0, 283.9655172413793], [344.0, 483.41999999999985], [341.0, 1177.8], [340.0, 1100.4166666666667], [345.0, 441.19999999999993], [346.0, 163.87096774193552], [347.0, 454.3584905660377], [355.0, 340.50000000000006], [352.0, 172.41666666666669], [354.0, 274.4054054054054], [353.0, 521.2142857142857], [356.0, 200.66666666666666], [358.0, 631.5714285714286], [359.0, 2407.8], [362.0, 793.9090909090909], [361.0, 347.82608695652175], [364.0, 231.03999999999996], [365.0, 275.1014492753622], [367.0, 328.14035087719293], [360.0, 189.0], [366.0, 246.69047619047615], [363.0, 504.34374999999994], [369.0, 300.77272727272725], [370.0, 388.74999999999983], [368.0, 216.5238095238095], [371.0, 161.85294117647064], [373.0, 415.0972222222221], [374.0, 147.85365853658539], [372.0, 502.6428571428571], [375.0, 691.4782608695652], [376.0, 294.2647058823529], [379.0, 284.4705882352941], [378.0, 1563.1666666666667], [377.0, 478.21739130434776], [381.0, 148.36842105263156], [382.0, 332.2105263157895], [383.0, 743.3055555555555], [380.0, 977.1818181818181], [397.0, 1011.8999999999999], [384.0, 132.33333333333334], [385.0, 114.96153846153845], [396.0, 644.6538461538461], [387.0, 142.875], [390.0, 585.7567567567568], [391.0, 72.66666666666667], [389.0, 665.8636363636364], [388.0, 162.7], [392.0, 311.61904761904765], [393.0, 419.9736842105264], [395.0, 298.5068493150685], [394.0, 165.2592592592593], [398.0, 847.5000000000001], [399.0, 346.2368421052632], [403.0, 449.21428571428567], [400.0, 385.24074074074076], [401.0, 151.09090909090912], [402.0, 270.18421052631584], [404.0, 484.11764705882354], [406.0, 151.39999999999998], [405.0, 428.57142857142856], [407.0, 442.00000000000006], [409.0, 197.35135135135135], [408.0, 102.33333333333333], [415.0, 149.0], [414.0, 721.4090909090909], [410.0, 867.4242424242425], [411.0, 521.0149253731342], [413.0, 611.8636363636363], [412.0, 194.56521739130432], [417.0, 464.5135135135135], [418.0, 459.77419354838713], [416.0, 295.62962962962973], [420.0, 353.00000000000006], [419.0, 393.27272727272725], [422.0, 698.8], [421.0, 385.7428571428572], [423.0, 244.26315789473682], [424.0, 230.71428571428572], [428.0, 519.5000000000001], [430.0, 412.51612903225805], [429.0, 229.5], [431.0, 334.2], [425.0, 892.184210526316], [427.0, 860.12], [426.0, 575.9047619047618], [433.0, 551.2058823529412], [432.0, 428.26086956521743], [434.0, 796.6666666666666], [435.0, 891.2499999999999], [439.0, 455.4705882352943], [438.0, 574.3939393939393], [440.0, 330.44444444444446], [443.0, 576.1538461538463], [441.0, 515.0666666666667], [447.0, 719.85], [437.0, 222.6153846153846], [436.0, 532.2], [444.0, 242.83333333333331], [446.0, 269.9047619047619], [445.0, 392.3492063492064], [448.0, 270.0666666666667], [449.0, 324.18181818181824], [451.0, 478.96296296296293], [452.0, 192.57142857142858], [453.0, 139.66666666666666], [450.0, 1047.75], [1.0, 46.166666666666664]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[291.41879999999765, 423.9909999999997]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 453.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 10666.25, "minX": 1.71483072E12, "maxY": 115752.41666666667, "series": [{"data": [[1.71483078E12, 76369.85], [1.71483072E12, 115752.41666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.71483078E12, 10666.25], [1.71483072E12, 16167.083333333334]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71483078E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 291.6107883817419, "minX": 1.71483072E12, "maxY": 624.6427672955977, "series": [{"data": [[1.71483078E12, 624.6427672955977], [1.71483072E12, 291.6107883817419]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71483078E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 291.5797510373447, "minX": 1.71483072E12, "maxY": 624.6316981132071, "series": [{"data": [[1.71483078E12, 624.6316981132071], [1.71483072E12, 291.5797510373447]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71483078E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 81.77726141078841, "minX": 1.71483072E12, "maxY": 154.73937106918228, "series": [{"data": [[1.71483078E12, 154.73937106918228], [1.71483072E12, 81.77726141078841]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71483078E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 34.0, "minX": 1.71483072E12, "maxY": 21798.0, "series": [{"data": [[1.71483078E12, 21798.0], [1.71483072E12, 6568.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.71483078E12, 1792.4], [1.71483072E12, 661.0000000000027]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.71483078E12, 8173.799999999979], [1.71483072E12, 3000.739999999989]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.71483078E12, 3944.7999999999993], [1.71483072E12, 1360.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.71483078E12, 34.0], [1.71483072E12, 37.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.71483078E12, 80.0], [1.71483072E12, 93.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71483078E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 46.0, "minX": 9.0, "maxY": 387.0, "series": [{"data": [[512.0, 69.0], [34.0, 50.5], [9.0, 58.0], [10.0, 46.0], [696.0, 96.0], [676.0, 128.0], [693.0, 117.0], [726.0, 107.0], [718.0, 85.5], [793.0, 105.0], [870.0, 83.0], [55.0, 58.0], [901.0, 81.0], [56.0, 62.5], [930.0, 92.0], [232.0, 61.0], [246.0, 387.0], [980.0, 94.0], [60.0, 63.0], [303.0, 60.0], [77.0, 59.0], [423.0, 67.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 980.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 46.0, "minX": 9.0, "maxY": 387.0, "series": [{"data": [[512.0, 69.0], [34.0, 50.5], [9.0, 58.0], [10.0, 46.0], [696.0, 96.0], [676.0, 128.0], [693.0, 117.0], [726.0, 107.0], [718.0, 85.5], [793.0, 105.0], [870.0, 83.0], [55.0, 58.0], [901.0, 81.0], [56.0, 62.5], [930.0, 92.0], [232.0, 61.0], [246.0, 387.0], [980.0, 94.0], [60.0, 63.0], [303.0, 60.0], [77.0, 59.0], [423.0, 67.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 980.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 59.3, "minX": 1.71483072E12, "maxY": 107.36666666666666, "series": [{"data": [[1.71483078E12, 59.3], [1.71483072E12, 107.36666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71483078E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 66.25, "minX": 1.71483072E12, "maxY": 100.41666666666667, "series": [{"data": [[1.71483078E12, 66.25], [1.71483072E12, 100.41666666666667]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71483078E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 66.25, "minX": 1.71483072E12, "maxY": 100.41666666666667, "series": [{"data": [[1.71483078E12, 66.25], [1.71483072E12, 100.41666666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71483078E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 66.25, "minX": 1.71483072E12, "maxY": 100.41666666666667, "series": [{"data": [[1.71483078E12, 66.25], [1.71483072E12, 100.41666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71483078E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

