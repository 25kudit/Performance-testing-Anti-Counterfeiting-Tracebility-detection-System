/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 33.0, "minX": 0.0, "maxY": 28113.0, "series": [{"data": [[0.0, 33.0], [0.1, 34.0], [0.2, 35.0], [0.3, 36.0], [0.4, 36.0], [0.5, 37.0], [0.6, 38.0], [0.7, 39.0], [0.8, 40.0], [0.9, 40.0], [1.0, 41.0], [1.1, 41.0], [1.2, 42.0], [1.3, 43.0], [1.4, 44.0], [1.5, 44.0], [1.6, 45.0], [1.7, 45.0], [1.8, 45.0], [1.9, 45.0], [2.0, 45.0], [2.1, 45.0], [2.2, 45.0], [2.3, 46.0], [2.4, 46.0], [2.5, 46.0], [2.6, 46.0], [2.7, 46.0], [2.8, 46.0], [2.9, 46.0], [3.0, 46.0], [3.1, 46.0], [3.2, 47.0], [3.3, 47.0], [3.4, 47.0], [3.5, 47.0], [3.6, 47.0], [3.7, 47.0], [3.8, 47.0], [3.9, 47.0], [4.0, 47.0], [4.1, 48.0], [4.2, 48.0], [4.3, 48.0], [4.4, 48.0], [4.5, 48.0], [4.6, 48.0], [4.7, 48.0], [4.8, 49.0], [4.9, 49.0], [5.0, 49.0], [5.1, 49.0], [5.2, 49.0], [5.3, 49.0], [5.4, 49.0], [5.5, 49.0], [5.6, 50.0], [5.7, 50.0], [5.8, 50.0], [5.9, 50.0], [6.0, 50.0], [6.1, 50.0], [6.2, 50.0], [6.3, 50.0], [6.4, 51.0], [6.5, 51.0], [6.6, 51.0], [6.7, 51.0], [6.8, 51.0], [6.9, 51.0], [7.0, 51.0], [7.1, 51.0], [7.2, 51.0], [7.3, 52.0], [7.4, 52.0], [7.5, 52.0], [7.6, 52.0], [7.7, 52.0], [7.8, 52.0], [7.9, 52.0], [8.0, 52.0], [8.1, 52.0], [8.2, 53.0], [8.3, 53.0], [8.4, 53.0], [8.5, 53.0], [8.6, 53.0], [8.7, 53.0], [8.8, 53.0], [8.9, 53.0], [9.0, 53.0], [9.1, 54.0], [9.2, 54.0], [9.3, 54.0], [9.4, 54.0], [9.5, 54.0], [9.6, 54.0], [9.7, 54.0], [9.8, 54.0], [9.9, 54.0], [10.0, 54.0], [10.1, 55.0], [10.2, 55.0], [10.3, 55.0], [10.4, 55.0], [10.5, 55.0], [10.6, 55.0], [10.7, 55.0], [10.8, 55.0], [10.9, 55.0], [11.0, 55.0], [11.1, 55.0], [11.2, 55.0], [11.3, 55.0], [11.4, 56.0], [11.5, 56.0], [11.6, 56.0], [11.7, 56.0], [11.8, 56.0], [11.9, 56.0], [12.0, 56.0], [12.1, 56.0], [12.2, 56.0], [12.3, 56.0], [12.4, 56.0], [12.5, 56.0], [12.6, 56.0], [12.7, 56.0], [12.8, 56.0], [12.9, 56.0], [13.0, 56.0], [13.1, 56.0], [13.2, 57.0], [13.3, 57.0], [13.4, 57.0], [13.5, 57.0], [13.6, 57.0], [13.7, 57.0], [13.8, 57.0], [13.9, 57.0], [14.0, 57.0], [14.1, 57.0], [14.2, 57.0], [14.3, 57.0], [14.4, 57.0], [14.5, 57.0], [14.6, 57.0], [14.7, 57.0], [14.8, 57.0], [14.9, 57.0], [15.0, 57.0], [15.1, 58.0], [15.2, 58.0], [15.3, 58.0], [15.4, 58.0], [15.5, 58.0], [15.6, 58.0], [15.7, 58.0], [15.8, 58.0], [15.9, 58.0], [16.0, 58.0], [16.1, 58.0], [16.2, 58.0], [16.3, 58.0], [16.4, 58.0], [16.5, 58.0], [16.6, 58.0], [16.7, 59.0], [16.8, 59.0], [16.9, 59.0], [17.0, 59.0], [17.1, 59.0], [17.2, 59.0], [17.3, 59.0], [17.4, 59.0], [17.5, 59.0], [17.6, 59.0], [17.7, 59.0], [17.8, 59.0], [17.9, 59.0], [18.0, 59.0], [18.1, 59.0], [18.2, 60.0], [18.3, 60.0], [18.4, 60.0], [18.5, 60.0], [18.6, 60.0], [18.7, 60.0], [18.8, 60.0], [18.9, 60.0], [19.0, 60.0], [19.1, 60.0], [19.2, 60.0], [19.3, 60.0], [19.4, 60.0], [19.5, 60.0], [19.6, 60.0], [19.7, 60.0], [19.8, 60.0], [19.9, 60.0], [20.0, 60.0], [20.1, 61.0], [20.2, 61.0], [20.3, 61.0], [20.4, 61.0], [20.5, 61.0], [20.6, 61.0], [20.7, 61.0], [20.8, 61.0], [20.9, 61.0], [21.0, 61.0], [21.1, 61.0], [21.2, 61.0], [21.3, 61.0], [21.4, 61.0], [21.5, 61.0], [21.6, 61.0], [21.7, 61.0], [21.8, 62.0], [21.9, 62.0], [22.0, 62.0], [22.1, 62.0], [22.2, 62.0], [22.3, 62.0], [22.4, 62.0], [22.5, 62.0], [22.6, 62.0], [22.7, 62.0], [22.8, 62.0], [22.9, 62.0], [23.0, 62.0], [23.1, 62.0], [23.2, 62.0], [23.3, 62.0], [23.4, 62.0], [23.5, 62.0], [23.6, 62.0], [23.7, 63.0], [23.8, 63.0], [23.9, 63.0], [24.0, 63.0], [24.1, 63.0], [24.2, 63.0], [24.3, 63.0], [24.4, 63.0], [24.5, 63.0], [24.6, 63.0], [24.7, 63.0], [24.8, 63.0], [24.9, 63.0], [25.0, 63.0], [25.1, 63.0], [25.2, 63.0], [25.3, 63.0], [25.4, 63.0], [25.5, 64.0], [25.6, 64.0], [25.7, 64.0], [25.8, 64.0], [25.9, 64.0], [26.0, 64.0], [26.1, 64.0], [26.2, 64.0], [26.3, 64.0], [26.4, 64.0], [26.5, 64.0], [26.6, 64.0], [26.7, 64.0], [26.8, 64.0], [26.9, 64.0], [27.0, 64.0], [27.1, 64.0], [27.2, 65.0], [27.3, 65.0], [27.4, 65.0], [27.5, 65.0], [27.6, 65.0], [27.7, 65.0], [27.8, 65.0], [27.9, 65.0], [28.0, 65.0], [28.1, 65.0], [28.2, 65.0], [28.3, 65.0], [28.4, 65.0], [28.5, 65.0], [28.6, 65.0], [28.7, 65.0], [28.8, 66.0], [28.9, 66.0], [29.0, 66.0], [29.1, 66.0], [29.2, 66.0], [29.3, 66.0], [29.4, 66.0], [29.5, 66.0], [29.6, 66.0], [29.7, 66.0], [29.8, 66.0], [29.9, 66.0], [30.0, 66.0], [30.1, 66.0], [30.2, 66.0], [30.3, 67.0], [30.4, 67.0], [30.5, 67.0], [30.6, 67.0], [30.7, 67.0], [30.8, 67.0], [30.9, 67.0], [31.0, 67.0], [31.1, 67.0], [31.2, 67.0], [31.3, 67.0], [31.4, 67.0], [31.5, 68.0], [31.6, 68.0], [31.7, 68.0], [31.8, 68.0], [31.9, 68.0], [32.0, 68.0], [32.1, 68.0], [32.2, 68.0], [32.3, 68.0], [32.4, 68.0], [32.5, 68.0], [32.6, 68.0], [32.7, 68.0], [32.8, 68.0], [32.9, 68.0], [33.0, 69.0], [33.1, 69.0], [33.2, 69.0], [33.3, 69.0], [33.4, 69.0], [33.5, 69.0], [33.6, 69.0], [33.7, 69.0], [33.8, 69.0], [33.9, 69.0], [34.0, 69.0], [34.1, 69.0], [34.2, 69.0], [34.3, 69.0], [34.4, 70.0], [34.5, 70.0], [34.6, 70.0], [34.7, 70.0], [34.8, 70.0], [34.9, 70.0], [35.0, 70.0], [35.1, 70.0], [35.2, 70.0], [35.3, 70.0], [35.4, 70.0], [35.5, 71.0], [35.6, 71.0], [35.7, 71.0], [35.8, 71.0], [35.9, 71.0], [36.0, 71.0], [36.1, 71.0], [36.2, 71.0], [36.3, 71.0], [36.4, 71.0], [36.5, 71.0], [36.6, 71.0], [36.7, 72.0], [36.8, 72.0], [36.9, 72.0], [37.0, 72.0], [37.1, 72.0], [37.2, 72.0], [37.3, 72.0], [37.4, 72.0], [37.5, 72.0], [37.6, 72.0], [37.7, 72.0], [37.8, 72.0], [37.9, 72.0], [38.0, 73.0], [38.1, 73.0], [38.2, 73.0], [38.3, 73.0], [38.4, 73.0], [38.5, 73.0], [38.6, 73.0], [38.7, 73.0], [38.8, 73.0], [38.9, 73.0], [39.0, 73.0], [39.1, 73.0], [39.2, 73.0], [39.3, 73.0], [39.4, 74.0], [39.5, 74.0], [39.6, 74.0], [39.7, 74.0], [39.8, 74.0], [39.9, 74.0], [40.0, 74.0], [40.1, 74.0], [40.2, 74.0], [40.3, 74.0], [40.4, 74.0], [40.5, 74.0], [40.6, 74.0], [40.7, 74.0], [40.8, 75.0], [40.9, 75.0], [41.0, 75.0], [41.1, 75.0], [41.2, 75.0], [41.3, 75.0], [41.4, 75.0], [41.5, 75.0], [41.6, 75.0], [41.7, 75.0], [41.8, 75.0], [41.9, 75.0], [42.0, 75.0], [42.1, 75.0], [42.2, 76.0], [42.3, 76.0], [42.4, 76.0], [42.5, 76.0], [42.6, 76.0], [42.7, 76.0], [42.8, 76.0], [42.9, 76.0], [43.0, 76.0], [43.1, 76.0], [43.2, 76.0], [43.3, 76.0], [43.4, 76.0], [43.5, 76.0], [43.6, 77.0], [43.7, 77.0], [43.8, 77.0], [43.9, 77.0], [44.0, 77.0], [44.1, 77.0], [44.2, 77.0], [44.3, 77.0], [44.4, 77.0], [44.5, 77.0], [44.6, 77.0], [44.7, 77.0], [44.8, 77.0], [44.9, 77.0], [45.0, 78.0], [45.1, 78.0], [45.2, 78.0], [45.3, 78.0], [45.4, 78.0], [45.5, 78.0], [45.6, 78.0], [45.7, 78.0], [45.8, 78.0], [45.9, 78.0], [46.0, 78.0], [46.1, 78.0], [46.2, 78.0], [46.3, 79.0], [46.4, 79.0], [46.5, 79.0], [46.6, 79.0], [46.7, 79.0], [46.8, 79.0], [46.9, 79.0], [47.0, 79.0], [47.1, 79.0], [47.2, 79.0], [47.3, 79.0], [47.4, 79.0], [47.5, 79.0], [47.6, 79.0], [47.7, 80.0], [47.8, 80.0], [47.9, 80.0], [48.0, 80.0], [48.1, 80.0], [48.2, 80.0], [48.3, 80.0], [48.4, 80.0], [48.5, 80.0], [48.6, 80.0], [48.7, 80.0], [48.8, 80.0], [48.9, 80.0], [49.0, 81.0], [49.1, 81.0], [49.2, 81.0], [49.3, 81.0], [49.4, 81.0], [49.5, 81.0], [49.6, 81.0], [49.7, 81.0], [49.8, 81.0], [49.9, 81.0], [50.0, 82.0], [50.1, 82.0], [50.2, 82.0], [50.3, 82.0], [50.4, 82.0], [50.5, 82.0], [50.6, 82.0], [50.7, 82.0], [50.8, 83.0], [50.9, 83.0], [51.0, 83.0], [51.1, 83.0], [51.2, 83.0], [51.3, 83.0], [51.4, 83.0], [51.5, 83.0], [51.6, 84.0], [51.7, 84.0], [51.8, 84.0], [51.9, 84.0], [52.0, 84.0], [52.1, 84.0], [52.2, 84.0], [52.3, 84.0], [52.4, 84.0], [52.5, 84.0], [52.6, 84.0], [52.7, 85.0], [52.8, 85.0], [52.9, 85.0], [53.0, 85.0], [53.1, 85.0], [53.2, 85.0], [53.3, 85.0], [53.4, 85.0], [53.5, 86.0], [53.6, 86.0], [53.7, 86.0], [53.8, 86.0], [53.9, 86.0], [54.0, 86.0], [54.1, 86.0], [54.2, 86.0], [54.3, 86.0], [54.4, 86.0], [54.5, 87.0], [54.6, 87.0], [54.7, 87.0], [54.8, 87.0], [54.9, 87.0], [55.0, 87.0], [55.1, 87.0], [55.2, 87.0], [55.3, 88.0], [55.4, 88.0], [55.5, 88.0], [55.6, 88.0], [55.7, 88.0], [55.8, 88.0], [55.9, 88.0], [56.0, 88.0], [56.1, 89.0], [56.2, 89.0], [56.3, 89.0], [56.4, 89.0], [56.5, 89.0], [56.6, 89.0], [56.7, 89.0], [56.8, 89.0], [56.9, 89.0], [57.0, 90.0], [57.1, 90.0], [57.2, 90.0], [57.3, 90.0], [57.4, 90.0], [57.5, 90.0], [57.6, 90.0], [57.7, 90.0], [57.8, 90.0], [57.9, 91.0], [58.0, 91.0], [58.1, 91.0], [58.2, 91.0], [58.3, 91.0], [58.4, 91.0], [58.5, 92.0], [58.6, 92.0], [58.7, 92.0], [58.8, 92.0], [58.9, 92.0], [59.0, 92.0], [59.1, 92.0], [59.2, 93.0], [59.3, 93.0], [59.4, 93.0], [59.5, 93.0], [59.6, 93.0], [59.7, 93.0], [59.8, 94.0], [59.9, 94.0], [60.0, 94.0], [60.1, 94.0], [60.2, 94.0], [60.3, 94.0], [60.4, 95.0], [60.5, 95.0], [60.6, 95.0], [60.7, 95.0], [60.8, 95.0], [60.9, 96.0], [61.0, 96.0], [61.1, 96.0], [61.2, 96.0], [61.3, 96.0], [61.4, 97.0], [61.5, 97.0], [61.6, 97.0], [61.7, 97.0], [61.8, 98.0], [61.9, 98.0], [62.0, 98.0], [62.1, 98.0], [62.2, 98.0], [62.3, 99.0], [62.4, 99.0], [62.5, 99.0], [62.6, 100.0], [62.7, 100.0], [62.8, 100.0], [62.9, 100.0], [63.0, 101.0], [63.1, 101.0], [63.2, 102.0], [63.3, 103.0], [63.4, 103.0], [63.5, 103.0], [63.6, 104.0], [63.7, 104.0], [63.8, 105.0], [63.9, 106.0], [64.0, 106.0], [64.1, 107.0], [64.2, 108.0], [64.3, 108.0], [64.4, 109.0], [64.5, 109.0], [64.6, 110.0], [64.7, 111.0], [64.8, 111.0], [64.9, 112.0], [65.0, 113.0], [65.1, 114.0], [65.2, 114.0], [65.3, 116.0], [65.4, 117.0], [65.5, 117.0], [65.6, 118.0], [65.7, 119.0], [65.8, 120.0], [65.9, 120.0], [66.0, 121.0], [66.1, 121.0], [66.2, 122.0], [66.3, 122.0], [66.4, 124.0], [66.5, 125.0], [66.6, 126.0], [66.7, 126.0], [66.8, 128.0], [66.9, 129.0], [67.0, 130.0], [67.1, 131.0], [67.2, 134.0], [67.3, 136.0], [67.4, 137.0], [67.5, 140.0], [67.6, 141.0], [67.7, 143.0], [67.8, 144.0], [67.9, 148.0], [68.0, 153.0], [68.1, 155.0], [68.2, 159.0], [68.3, 161.0], [68.4, 164.0], [68.5, 168.0], [68.6, 169.0], [68.7, 172.0], [68.8, 177.0], [68.9, 182.0], [69.0, 187.0], [69.1, 195.0], [69.2, 213.0], [69.3, 263.0], [69.4, 268.0], [69.5, 272.0], [69.6, 275.0], [69.7, 278.0], [69.8, 279.0], [69.9, 281.0], [70.0, 282.0], [70.1, 283.0], [70.2, 284.0], [70.3, 285.0], [70.4, 285.0], [70.5, 287.0], [70.6, 288.0], [70.7, 289.0], [70.8, 291.0], [70.9, 293.0], [71.0, 294.0], [71.1, 295.0], [71.2, 296.0], [71.3, 297.0], [71.4, 298.0], [71.5, 299.0], [71.6, 300.0], [71.7, 302.0], [71.8, 302.0], [71.9, 304.0], [72.0, 305.0], [72.1, 306.0], [72.2, 307.0], [72.3, 308.0], [72.4, 309.0], [72.5, 310.0], [72.6, 311.0], [72.7, 313.0], [72.8, 314.0], [72.9, 315.0], [73.0, 317.0], [73.1, 319.0], [73.2, 321.0], [73.3, 323.0], [73.4, 325.0], [73.5, 326.0], [73.6, 328.0], [73.7, 331.0], [73.8, 336.0], [73.9, 338.0], [74.0, 341.0], [74.1, 344.0], [74.2, 346.0], [74.3, 349.0], [74.4, 351.0], [74.5, 353.0], [74.6, 355.0], [74.7, 357.0], [74.8, 360.0], [74.9, 362.0], [75.0, 365.0], [75.1, 369.0], [75.2, 372.0], [75.3, 375.0], [75.4, 379.0], [75.5, 382.0], [75.6, 386.0], [75.7, 391.0], [75.8, 397.0], [75.9, 405.0], [76.0, 411.0], [76.1, 432.0], [76.2, 461.0], [76.3, 479.0], [76.4, 492.0], [76.5, 501.0], [76.6, 512.0], [76.7, 524.0], [76.8, 534.0], [76.9, 543.0], [77.0, 553.0], [77.1, 562.0], [77.2, 575.0], [77.3, 590.0], [77.4, 602.0], [77.5, 622.0], [77.6, 639.0], [77.7, 657.0], [77.8, 673.0], [77.9, 688.0], [78.0, 723.0], [78.1, 751.0], [78.2, 770.0], [78.3, 799.0], [78.4, 816.0], [78.5, 855.0], [78.6, 902.0], [78.7, 934.0], [78.8, 945.0], [78.9, 967.0], [79.0, 987.0], [79.1, 1005.0], [79.2, 1032.0], [79.3, 1055.0], [79.4, 1080.0], [79.5, 1103.0], [79.6, 1132.0], [79.7, 1180.0], [79.8, 1212.0], [79.9, 1246.0], [80.0, 1283.0], [80.1, 1319.0], [80.2, 1357.0], [80.3, 1375.0], [80.4, 1381.0], [80.5, 1391.0], [80.6, 1410.0], [80.7, 1434.0], [80.8, 1446.0], [80.9, 1479.0], [81.0, 1497.0], [81.1, 1530.0], [81.2, 1601.0], [81.3, 1628.0], [81.4, 1648.0], [81.5, 1669.0], [81.6, 1688.0], [81.7, 1740.0], [81.8, 1753.0], [81.9, 1769.0], [82.0, 1791.0], [82.1, 1816.0], [82.2, 1822.0], [82.3, 1836.0], [82.4, 1856.0], [82.5, 1891.0], [82.6, 1922.0], [82.7, 1953.0], [82.8, 1970.0], [82.9, 1990.0], [83.0, 2019.0], [83.1, 2048.0], [83.2, 2088.0], [83.3, 2123.0], [83.4, 2150.0], [83.5, 2180.0], [83.6, 2209.0], [83.7, 2238.0], [83.8, 2295.0], [83.9, 2322.0], [84.0, 2365.0], [84.1, 2410.0], [84.2, 2451.0], [84.3, 2478.0], [84.4, 2501.0], [84.5, 2539.0], [84.6, 2565.0], [84.7, 2594.0], [84.8, 2627.0], [84.9, 2659.0], [85.0, 2680.0], [85.1, 2710.0], [85.2, 2739.0], [85.3, 2758.0], [85.4, 2804.0], [85.5, 2843.0], [85.6, 2886.0], [85.7, 2911.0], [85.8, 2939.0], [85.9, 2981.0], [86.0, 2993.0], [86.1, 3034.0], [86.2, 3067.0], [86.3, 3091.0], [86.4, 3127.0], [86.5, 3174.0], [86.6, 3210.0], [86.7, 3269.0], [86.8, 3300.0], [86.9, 3344.0], [87.0, 3397.0], [87.1, 3426.0], [87.2, 3472.0], [87.3, 3495.0], [87.4, 3532.0], [87.5, 3568.0], [87.6, 3602.0], [87.7, 3617.0], [87.8, 3649.0], [87.9, 3666.0], [88.0, 3690.0], [88.1, 3725.0], [88.2, 3744.0], [88.3, 3767.0], [88.4, 3802.0], [88.5, 3821.0], [88.6, 3851.0], [88.7, 3869.0], [88.8, 3893.0], [88.9, 3944.0], [89.0, 3983.0], [89.1, 4008.0], [89.2, 4056.0], [89.3, 4103.0], [89.4, 4141.0], [89.5, 4180.0], [89.6, 4223.0], [89.7, 4241.0], [89.8, 4274.0], [89.9, 4301.0], [90.0, 4356.0], [90.1, 4381.0], [90.2, 4417.0], [90.3, 4439.0], [90.4, 4511.0], [90.5, 4554.0], [90.6, 4597.0], [90.7, 4613.0], [90.8, 4674.0], [90.9, 4785.0], [91.0, 4833.0], [91.1, 4865.0], [91.2, 4914.0], [91.3, 4980.0], [91.4, 5032.0], [91.5, 5107.0], [91.6, 5145.0], [91.7, 5200.0], [91.8, 5230.0], [91.9, 5270.0], [92.0, 5309.0], [92.1, 5358.0], [92.2, 5403.0], [92.3, 5483.0], [92.4, 5549.0], [92.5, 5628.0], [92.6, 5728.0], [92.7, 5814.0], [92.8, 5875.0], [92.9, 5932.0], [93.0, 6013.0], [93.1, 6081.0], [93.2, 6123.0], [93.3, 6201.0], [93.4, 6284.0], [93.5, 6432.0], [93.6, 6498.0], [93.7, 6540.0], [93.8, 6576.0], [93.9, 6611.0], [94.0, 6646.0], [94.1, 6674.0], [94.2, 6703.0], [94.3, 6750.0], [94.4, 6776.0], [94.5, 6815.0], [94.6, 6856.0], [94.7, 6948.0], [94.8, 7018.0], [94.9, 7072.0], [95.0, 7114.0], [95.1, 7182.0], [95.2, 7268.0], [95.3, 7370.0], [95.4, 7413.0], [95.5, 7468.0], [95.6, 7567.0], [95.7, 7637.0], [95.8, 7729.0], [95.9, 7799.0], [96.0, 7913.0], [96.1, 8006.0], [96.2, 8111.0], [96.3, 8184.0], [96.4, 8301.0], [96.5, 8376.0], [96.6, 8550.0], [96.7, 8687.0], [96.8, 8771.0], [96.9, 8926.0], [97.0, 9075.0], [97.1, 9255.0], [97.2, 9427.0], [97.3, 9589.0], [97.4, 9741.0], [97.5, 9887.0], [97.6, 10110.0], [97.7, 10286.0], [97.8, 10548.0], [97.9, 10769.0], [98.0, 10950.0], [98.1, 11184.0], [98.2, 11398.0], [98.3, 11691.0], [98.4, 11937.0], [98.5, 12048.0], [98.6, 12390.0], [98.7, 12749.0], [98.8, 12922.0], [98.9, 13215.0], [99.0, 13552.0], [99.1, 13995.0], [99.2, 14636.0], [99.3, 15051.0], [99.4, 15529.0], [99.5, 15649.0], [99.6, 16088.0], [99.7, 17769.0], [99.8, 19048.0], [99.9, 20310.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 8759.0, "series": [{"data": [[0.0, 8759.0], [100.0, 920.0], [200.0, 332.0], [300.0, 605.0], [400.0, 90.0], [500.0, 127.0], [600.0, 80.0], [700.0, 50.0], [800.0, 40.0], [900.0, 69.0], [1000.0, 54.0], [1100.0, 42.0], [1200.0, 42.0], [1300.0, 68.0], [1400.0, 65.0], [1500.0, 24.0], [1600.0, 61.0], [1700.0, 54.0], [1800.0, 71.0], [1900.0, 56.0], [2000.0, 43.0], [2100.0, 47.0], [2200.0, 38.0], [2300.0, 33.0], [2400.0, 46.0], [2500.0, 44.0], [2600.0, 49.0], [2700.0, 47.0], [2800.0, 37.0], [2900.0, 50.0], [3000.0, 45.0], [3100.0, 33.0], [3200.0, 31.0], [3300.0, 32.0], [3400.0, 40.0], [3500.0, 40.0], [3700.0, 48.0], [3600.0, 64.0], [3800.0, 57.0], [3900.0, 38.0], [4000.0, 29.0], [4200.0, 51.0], [4100.0, 35.0], [4300.0, 36.0], [4400.0, 33.0], [4500.0, 32.0], [4600.0, 28.0], [4700.0, 14.0], [4800.0, 35.0], [4900.0, 23.0], [5000.0, 19.0], [5100.0, 32.0], [5200.0, 38.0], [5300.0, 32.0], [5400.0, 18.0], [5500.0, 19.0], [5600.0, 16.0], [5700.0, 13.0], [5800.0, 27.0], [5900.0, 15.0], [6000.0, 24.0], [6100.0, 22.0], [6200.0, 16.0], [6300.0, 11.0], [6400.0, 16.0], [6500.0, 34.0], [6600.0, 48.0], [6700.0, 35.0], [6800.0, 34.0], [6900.0, 11.0], [7000.0, 30.0], [7100.0, 21.0], [7200.0, 12.0], [7300.0, 23.0], [7400.0, 24.0], [7500.0, 14.0], [7600.0, 19.0], [7700.0, 17.0], [7800.0, 13.0], [7900.0, 13.0], [8000.0, 15.0], [8100.0, 19.0], [8200.0, 9.0], [8300.0, 18.0], [8400.0, 6.0], [8500.0, 9.0], [8600.0, 14.0], [8700.0, 11.0], [8800.0, 12.0], [9000.0, 12.0], [9100.0, 10.0], [8900.0, 6.0], [9200.0, 6.0], [9300.0, 7.0], [9400.0, 6.0], [9500.0, 11.0], [9600.0, 9.0], [9700.0, 13.0], [9900.0, 6.0], [10100.0, 10.0], [10000.0, 5.0], [9800.0, 6.0], [10200.0, 8.0], [10300.0, 3.0], [10400.0, 7.0], [10600.0, 7.0], [10700.0, 6.0], [10500.0, 3.0], [10900.0, 6.0], [11000.0, 3.0], [10800.0, 11.0], [11100.0, 9.0], [11200.0, 8.0], [11300.0, 5.0], [11500.0, 4.0], [11600.0, 7.0], [11700.0, 7.0], [11400.0, 3.0], [11800.0, 4.0], [11900.0, 10.0], [12000.0, 10.0], [12100.0, 6.0], [12200.0, 2.0], [12400.0, 3.0], [12500.0, 3.0], [12600.0, 4.0], [12700.0, 10.0], [12300.0, 3.0], [12800.0, 7.0], [12900.0, 3.0], [13000.0, 5.0], [13100.0, 5.0], [13300.0, 4.0], [13200.0, 4.0], [13800.0, 4.0], [13400.0, 6.0], [13500.0, 6.0], [13600.0, 1.0], [13700.0, 1.0], [14300.0, 2.0], [14100.0, 2.0], [14200.0, 3.0], [13900.0, 4.0], [14000.0, 2.0], [14800.0, 3.0], [14500.0, 3.0], [14400.0, 1.0], [14600.0, 4.0], [14700.0, 1.0], [14900.0, 5.0], [15100.0, 1.0], [15300.0, 2.0], [15000.0, 2.0], [15200.0, 3.0], [15400.0, 4.0], [15500.0, 10.0], [15600.0, 10.0], [15700.0, 8.0], [15800.0, 1.0], [16100.0, 2.0], [16000.0, 2.0], [16300.0, 2.0], [15900.0, 1.0], [17000.0, 3.0], [17600.0, 1.0], [18400.0, 1.0], [18600.0, 3.0], [19000.0, 4.0], [19400.0, 2.0], [18800.0, 1.0], [19200.0, 2.0], [19600.0, 1.0], [19800.0, 1.0], [20000.0, 1.0], [20400.0, 1.0], [20600.0, 1.0], [21200.0, 1.0], [21800.0, 1.0], [22000.0, 1.0], [23200.0, 1.0], [25800.0, 1.0], [16500.0, 1.0], [17300.0, 2.0], [17700.0, 2.0], [17500.0, 2.0], [18100.0, 1.0], [18500.0, 1.0], [18900.0, 2.0], [18700.0, 1.0], [19100.0, 3.0], [19900.0, 1.0], [20100.0, 1.0], [20300.0, 1.0], [21100.0, 1.0], [21500.0, 1.0], [21900.0, 1.0], [23300.0, 1.0], [24100.0, 1.0], [28100.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 28100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 637.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 10706.0, "series": [{"data": [[0.0, 10706.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 637.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2657.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 511.53585325180666, "minX": 1.7148312E12, "maxY": 1278.4861845972912, "series": [{"data": [[1.71483126E12, 511.53585325180666], [1.7148312E12, 1278.4861845972912]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71483126E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 36.0, "minX": 1.0, "maxY": 10897.0, "series": [{"data": [[2.0, 2862.7999999999993], [3.0, 2626.4], [4.0, 41.5], [5.0, 54.90909090909091], [6.0, 4201.071428571428], [7.0, 61.0], [8.0, 60.6], [9.0, 1327.9], [10.0, 1105.8000000000002], [11.0, 4904.571428571428], [12.0, 55.5], [13.0, 58.5], [14.0, 2413.3333333333335], [15.0, 1747.5000000000002], [16.0, 4459.8], [17.0, 53.0], [18.0, 50.0], [19.0, 3292.3333333333335], [20.0, 46.0], [21.0, 50.80000000000001], [22.0, 62.0], [23.0, 3081.8333333333335], [24.0, 54.16666666666667], [25.0, 3506.285714285714], [26.0, 66.625], [27.0, 2555.5714285714284], [28.0, 55.0], [29.0, 53.0], [30.0, 55.25], [31.0, 3533.7307692307695], [33.0, 61.0], [32.0, 53.0], [35.0, 2123.636363636364], [34.0, 2991.666666666667], [37.0, 64.0], [39.0, 715.7857142857143], [38.0, 46.0], [41.0, 53.333333333333336], [40.0, 60.0], [43.0, 2747.857142857143], [42.0, 4272.2], [45.0, 1602.3478260869563], [44.0, 57.0], [47.0, 955.8], [46.0, 59.6], [49.0, 51.0], [48.0, 1239.2666666666667], [51.0, 56.333333333333336], [50.0, 59.0], [53.0, 55.5], [52.0, 5599.4], [55.0, 4497.000000000001], [54.0, 45.0], [57.0, 51.5], [56.0, 55.666666666666664], [59.0, 54.166666666666664], [58.0, 56.75], [61.0, 55.5], [60.0, 58.0], [63.0, 2262.5], [62.0, 62.0], [67.0, 1271.388888888889], [66.0, 53.0], [65.0, 53.25], [64.0, 64.83333333333333], [71.0, 3255.166666666667], [70.0, 1903.846153846154], [69.0, 2305.8571428571427], [68.0, 47.333333333333336], [75.0, 5750.0], [74.0, 54.2], [73.0, 50.333333333333336], [72.0, 1809.3684210526317], [79.0, 5174.5], [78.0, 50.0], [77.0, 60.0], [76.0, 4254.777777777777], [83.0, 54.583333333333336], [82.0, 55.0], [81.0, 57.0], [80.0, 50.0], [87.0, 2253.285714285714], [86.0, 1014.2380952380953], [85.0, 60.0], [84.0, 56.0], [91.0, 51.666666666666664], [90.0, 54.54545454545455], [89.0, 53.142857142857146], [88.0, 3648.3076923076924], [95.0, 2900.8888888888887], [94.0, 1469.7857142857142], [93.0, 57.666666666666664], [92.0, 9186.142857142857], [99.0, 63.0], [98.0, 52.25], [97.0, 1572.0], [103.0, 2777.1428571428573], [102.0, 55.5], [100.0, 52.666666666666664], [107.0, 59.0], [106.0, 671.0833333333335], [105.0, 53.333333333333336], [104.0, 6341.0], [111.0, 64.76923076923077], [110.0, 49.5], [109.0, 52.55555555555555], [108.0, 55.5], [115.0, 62.8], [114.0, 59.0], [113.0, 1886.8709677419356], [112.0, 51.75], [119.0, 52.0], [118.0, 4751.5], [117.0, 53.66666666666666], [116.0, 2578.9090909090914], [123.0, 6592.333333333333], [122.0, 53.22222222222222], [121.0, 52.8], [120.0, 6559.111111111111], [127.0, 3017.142857142857], [126.0, 58.5], [125.0, 2976.9230769230767], [124.0, 55.4], [135.0, 48.0], [134.0, 54.0], [133.0, 3871.25], [132.0, 2330.5000000000005], [131.0, 48.0], [130.0, 56.09090909090909], [129.0, 119.75], [143.0, 51.666666666666664], [142.0, 47.0], [141.0, 3783.8], [140.0, 52.0], [139.0, 1317.230769230769], [138.0, 53.714285714285715], [137.0, 60.6], [136.0, 4581.777777777777], [151.0, 4377.0], [150.0, 1080.96], [149.0, 54.0], [148.0, 1829.157894736842], [147.0, 61.4], [146.0, 59.0], [145.0, 52.4], [144.0, 6345.666666666667], [159.0, 53.333333333333336], [157.0, 1579.8333333333333], [156.0, 3136.3333333333335], [155.0, 51.63636363636364], [154.0, 56.666666666666664], [153.0, 56.0], [152.0, 54.666666666666664], [167.0, 2712.1428571428573], [166.0, 3138.0], [165.0, 6244.333333333334], [164.0, 69.5], [163.0, 58.0], [162.0, 3579.56], [161.0, 57.75], [175.0, 51.57142857142857], [174.0, 4313.454545454545], [172.0, 49.6], [171.0, 55.0], [170.0, 64.9], [169.0, 58.833333333333336], [168.0, 54.5], [183.0, 49.333333333333336], [182.0, 55.5], [181.0, 3380.3750000000005], [180.0, 1753.6521739130435], [179.0, 53.875], [178.0, 51.285714285714285], [177.0, 54.63636363636363], [176.0, 56.5], [191.0, 53.8], [190.0, 55.5], [189.0, 60.0], [188.0, 7590.5], [187.0, 53.666666666666664], [186.0, 52.0], [185.0, 59.0], [184.0, 58.23076923076922], [199.0, 2843.1499999999996], [198.0, 723.2857142857142], [197.0, 1109.6999999999998], [196.0, 5569.0], [195.0, 51.333333333333336], [194.0, 2922.5999999999995], [193.0, 59.5], [192.0, 55.599999999999994], [207.0, 2253.4285714285716], [206.0, 53.666666666666664], [205.0, 56.5], [204.0, 2142.4166666666665], [203.0, 5009.333333333333], [202.0, 836.3333333333333], [201.0, 54.6], [200.0, 54.25], [215.0, 6880.0], [214.0, 46.666666666666664], [213.0, 2089.851851851852], [212.0, 52.666666666666664], [211.0, 60.0], [210.0, 50.666666666666664], [209.0, 4098.923076923077], [208.0, 1158.142857142857], [223.0, 52.4], [222.0, 61.0], [221.0, 811.5714285714287], [218.0, 4216.888888888889], [217.0, 53.45454545454545], [216.0, 55.16666666666667], [231.0, 2731.545454545455], [230.0, 2768.2], [229.0, 53.166666666666664], [228.0, 36.0], [227.0, 53.2], [226.0, 6945.75], [225.0, 56.333333333333336], [224.0, 53.714285714285715], [239.0, 4527.666666666667], [238.0, 62.0], [237.0, 53.6], [236.0, 47.0], [235.0, 50.0], [234.0, 46.4], [233.0, 52.12500000000001], [232.0, 4592.333333333334], [247.0, 48.0], [246.0, 5393.666666666666], [245.0, 56.666666666666664], [244.0, 1351.6923076923072], [243.0, 5402.5], [242.0, 52.333333333333336], [241.0, 54.0], [240.0, 2018.8750000000002], [255.0, 50.0], [254.0, 49.2], [253.0, 1603.4444444444443], [252.0, 2865.818181818182], [251.0, 47.5], [250.0, 51.0], [249.0, 54.0], [248.0, 49.2], [270.0, 53.846153846153854], [271.0, 56.0], [269.0, 45.5], [268.0, 2092.625], [267.0, 3000.5], [266.0, 54.0], [265.0, 59.666666666666664], [264.0, 55.285714285714285], [263.0, 57.0], [257.0, 46.0], [256.0, 56.4375], [259.0, 58.5], [258.0, 45.0], [262.0, 2609.7272727272725], [260.0, 2416.24], [285.0, 2069.375], [286.0, 1629.3846153846155], [284.0, 53.57142857142857], [275.0, 2649.8888888888887], [274.0, 48.75], [273.0, 45.0], [272.0, 6380.8], [283.0, 53.666666666666664], [282.0, 62.0], [281.0, 61.0], [280.0, 58.5], [279.0, 54.3125], [278.0, 52.5], [277.0, 62.0], [276.0, 62.0], [302.0, 59.75], [303.0, 839.2499999999999], [301.0, 391.3333333333333], [300.0, 55.0], [299.0, 51.0], [298.0, 55.0], [297.0, 48.0], [296.0, 4276.75], [295.0, 55.0], [288.0, 60.16666666666667], [291.0, 59.666666666666664], [289.0, 4046.5], [294.0, 63.0], [293.0, 57.4], [292.0, 2070.8750000000005], [318.0, 55.0], [319.0, 61.24137931034483], [317.0, 52.53846153846154], [316.0, 56.0], [315.0, 1326.7500000000002], [314.0, 56.5], [312.0, 60.25], [311.0, 58.49999999999999], [307.0, 59.5], [306.0, 57.8], [310.0, 61.0], [309.0, 62.5], [308.0, 57.0], [334.0, 54.5], [335.0, 60.0], [333.0, 7855.36], [332.0, 2890.133333333333], [331.0, 2725.2], [330.0, 3132.2564102564106], [329.0, 1043.8666666666668], [328.0, 64.95238095238096], [327.0, 76.07692307692308], [320.0, 54.0], [323.0, 57.125], [321.0, 56.14814814814815], [326.0, 2117.8], [325.0, 543.0454545454546], [324.0, 1718.9], [350.0, 1552.3333333333333], [351.0, 56.75], [349.0, 651.08], [338.0, 64.33333333333333], [337.0, 65.66666666666667], [347.0, 2419.6666666666665], [346.0, 57.0], [345.0, 61.0], [344.0, 55.833333333333336], [343.0, 48.0], [342.0, 62.0], [341.0, 3145.8], [366.0, 54.0], [367.0, 6111.9], [364.0, 53.0], [355.0, 46.0], [354.0, 374.95238095238096], [353.0, 61.0], [352.0, 1282.2], [363.0, 2960.5454545454545], [362.0, 4120.272727272728], [361.0, 58.2], [360.0, 1123.923076923077], [359.0, 2135.1428571428573], [358.0, 1950.6249999999998], [357.0, 488.8846153846154], [356.0, 56.94736842105264], [382.0, 53.0], [383.0, 58.75], [381.0, 64.83333333333334], [380.0, 4990.8], [379.0, 2300.6], [378.0, 1537.5000000000002], [377.0, 66.0], [376.0, 2523.1666666666665], [375.0, 44.0], [369.0, 54.54545454545454], [368.0, 54.0], [371.0, 48.0], [370.0, 53.285714285714285], [374.0, 2084.857142857143], [373.0, 2877.6], [372.0, 1411.0], [398.0, 3304.8], [399.0, 2420.666666666667], [397.0, 46.0], [396.0, 61.857142857142854], [394.0, 54.00000000000001], [393.0, 334.0], [392.0, 61.875], [390.0, 58.0], [385.0, 50.5], [384.0, 54.38461538461539], [387.0, 58.666666666666664], [386.0, 51.5], [389.0, 54.888888888888886], [388.0, 54.666666666666664], [414.0, 52.5], [415.0, 64.9], [412.0, 51.333333333333336], [403.0, 59.666666666666664], [401.0, 59.0], [400.0, 60.63636363636365], [411.0, 7198.8], [410.0, 59.24999999999999], [409.0, 57.142857142857146], [408.0, 50.666666666666664], [407.0, 56.357142857142854], [406.0, 62.5], [405.0, 60.5], [404.0, 2259.25], [428.0, 69.0], [430.0, 72.375], [431.0, 3322.0], [429.0, 70.0], [426.0, 5277.428571428571], [425.0, 60.8125], [423.0, 66.66666666666667], [417.0, 59.333333333333336], [416.0, 47.25], [419.0, 2629.4444444444443], [418.0, 62.75], [446.0, 52.666666666666664], [447.0, 57.0], [445.0, 62.333333333333336], [444.0, 66.0], [443.0, 589.48], [442.0, 2212.666666666667], [441.0, 985.1818181818186], [440.0, 62.0], [439.0, 66.11111111111111], [434.0, 59.083333333333336], [433.0, 61.42857142857143], [432.0, 62.00000000000001], [436.0, 58.714285714285715], [462.0, 77.45454545454545], [463.0, 2749.2], [461.0, 63.5], [460.0, 1170.9166666666667], [459.0, 60.5], [458.0, 3417.833333333333], [457.0, 57.0], [456.0, 63.42857142857143], [455.0, 69.0], [449.0, 3085.7499999999995], [448.0, 58.125], [451.0, 2841.666666666667], [450.0, 65.0], [454.0, 66.33333333333333], [453.0, 79.2], [452.0, 1233.4545454545455], [478.0, 73.5], [479.0, 58.0], [477.0, 59.0], [476.0, 65.0], [474.0, 66.40000000000002], [473.0, 62.46153846153846], [472.0, 51.0], [470.0, 45.0], [467.0, 108.16666666666666], [465.0, 6406.0], [469.0, 3363.928571428571], [468.0, 57.0], [492.0, 69.57142857142857], [495.0, 4439.0], [494.0, 71.0], [493.0, 64.28571428571428], [488.0, 3748.2000000000003], [487.0, 47.0], [480.0, 61.16666666666667], [483.0, 101.19999999999999], [481.0, 2584.421052631579], [486.0, 68.10000000000002], [485.0, 108.8], [484.0, 3738.25], [498.0, 64.8], [510.0, 69.4], [511.0, 119.4], [508.0, 98.0], [497.0, 81.53571428571429], [496.0, 71.25], [505.0, 76.63636363636363], [504.0, 69.0], [503.0, 77.0], [502.0, 68.28571428571429], [501.0, 71.33333333333333], [500.0, 69.625], [538.0, 79.13636363636363], [542.0, 5032.375], [543.0, 74.99999999999999], [530.0, 5652.555555555556], [528.0, 55.75], [533.0, 73.43749999999999], [532.0, 70.72222222222221], [541.0, 2499.8], [540.0, 69.0], [539.0, 982.8666666666666], [537.0, 90.33333333333333], [518.0, 69.5], [517.0, 69.2], [516.0, 61.0], [515.0, 103.71428571428571], [514.0, 142.66666666666666], [513.0, 71.0], [512.0, 71.0], [527.0, 65.58333333333333], [526.0, 2356.4444444444443], [525.0, 81.0], [524.0, 80.0], [523.0, 74.14285714285714], [522.0, 2306.090909090909], [521.0, 76.50000000000001], [520.0, 76.5], [535.0, 84.63636363636364], [534.0, 82.0], [572.0, 73.8], [575.0, 53.0], [561.0, 1960.6923076923076], [560.0, 251.0], [563.0, 58.285714285714285], [562.0, 679.904761904762], [565.0, 61.0], [564.0, 117.86666666666666], [574.0, 3339.0], [573.0, 75.4090909090909], [571.0, 626.7727272727273], [570.0, 987.5714285714287], [569.0, 61.5], [568.0, 2217.1111111111113], [559.0, 992.2857142857143], [545.0, 68.0], [544.0, 576.7777777777777], [547.0, 76.66666666666667], [546.0, 1410.1], [549.0, 59.0], [548.0, 73.87500000000001], [551.0, 4255.444444444444], [550.0, 202.66666666666669], [558.0, 3015.4444444444443], [555.0, 662.4399999999999], [554.0, 1401.1], [553.0, 73.5], [567.0, 2068.5], [566.0, 1514.8888888888891], [604.0, 79.9375], [607.0, 1599.3076923076924], [592.0, 77.0], [594.0, 84.11111111111111], [593.0, 3433.2], [596.0, 62.0], [595.0, 1664.0000000000002], [606.0, 980.3333333333335], [605.0, 4100.772727272727], [603.0, 73.28571428571429], [602.0, 69.0], [601.0, 1218.1000000000001], [600.0, 63.0], [591.0, 1571.1875], [578.0, 922.714285714286], [577.0, 49.0], [580.0, 71.0], [579.0, 78.0], [582.0, 2971.65], [581.0, 5654.5], [590.0, 998.7142857142857], [589.0, 82.875], [587.0, 67.54545454545455], [586.0, 55.0], [585.0, 73.8], [584.0, 2247.7], [599.0, 158.0], [598.0, 930.9999999999998], [632.0, 62.0], [638.0, 69.0], [639.0, 67.0], [625.0, 3218.7499999999995], [637.0, 88.0], [636.0, 85.35714285714286], [633.0, 65.0], [623.0, 995.6428571428571], [608.0, 54.5], [610.0, 2223.4166666666665], [609.0, 64.0], [615.0, 72.0], [614.0, 824.5882352941177], [620.0, 166.5], [619.0, 159.0], [618.0, 71.75], [617.0, 84.0], [616.0, 80.0], [631.0, 68.0], [628.0, 689.7368421052632], [627.0, 1589.2500000000002], [626.0, 1520.0], [664.0, 73.36363636363636], [670.0, 907.0714285714286], [671.0, 3869.9999999999995], [657.0, 64.0], [656.0, 58.44444444444444], [669.0, 149.6], [667.0, 177.66666666666669], [665.0, 633.3809523809523], [655.0, 63.0], [640.0, 117.42857142857143], [642.0, 73.74999999999999], [641.0, 2763.75], [644.0, 1999.4375], [643.0, 5870.75], [647.0, 1984.0217391304345], [646.0, 1456.375], [653.0, 111.16666666666666], [652.0, 89.3125], [651.0, 53.0], [650.0, 1592.0833333333333], [649.0, 71.0], [648.0, 72.9], [663.0, 50.0], [661.0, 2265.612903225807], [660.0, 103.75], [658.0, 2232.8], [696.0, 3555.114285714285], [691.0, 73.09090909090908], [703.0, 88.29411764705881], [702.0, 84.33333333333333], [698.0, 71.375], [687.0, 350.85714285714283], [672.0, 43.0], [675.0, 3315.25], [674.0, 76.75], [677.0, 101.6], [676.0, 2251.0689655172414], [679.0, 3152.0], [678.0, 148.0], [686.0, 75.91666666666667], [685.0, 63.4], [683.0, 82.42857142857142], [682.0, 82.66666666666667], [695.0, 68.60000000000001], [694.0, 70.25], [693.0, 75.83333333333333], [690.0, 73.45454545454545], [688.0, 47.0], [728.0, 66.0], [733.0, 864.6153846153845], [734.0, 74.0], [720.0, 61.5], [722.0, 77.0], [721.0, 81.0], [731.0, 66.6], [730.0, 67.25], [729.0, 95.58333333333333], [719.0, 3743.9], [705.0, 1471.875], [704.0, 661.65], [708.0, 173.0], [707.0, 174.0], [710.0, 3385.5625000000005], [709.0, 70.1111111111111], [717.0, 2224.272727272727], [716.0, 85.0], [715.0, 89.66666666666667], [714.0, 167.2], [713.0, 112.12499999999999], [712.0, 1079.3333333333335], [727.0, 1211.3], [726.0, 105.5], [725.0, 559.5833333333334], [724.0, 74.73333333333333], [764.0, 82.71428571428572], [767.0, 111.0], [752.0, 707.9999999999999], [754.0, 75.3], [753.0, 70.6], [756.0, 72.5], [755.0, 74.8], [766.0, 1627.3584905660373], [765.0, 2056.0], [763.0, 2349.8], [762.0, 68.30000000000001], [761.0, 71.0], [760.0, 76.80000000000001], [751.0, 61.0], [737.0, 3483.3529411764707], [739.0, 2144.090909090909], [738.0, 5616.4], [741.0, 70.77777777777777], [740.0, 44.0], [743.0, 984.5384615384615], [742.0, 96.5], [750.0, 61.0], [749.0, 2928.8750000000005], [747.0, 59.9], [746.0, 208.00000000000009], [745.0, 116.2], [744.0, 66.23076923076924], [758.0, 106.04761904761905], [757.0, 99.09999999999998], [793.0, 71.66666666666669], [798.0, 73.28571428571429], [799.0, 3361.8], [785.0, 60.5], [784.0, 76.16666666666667], [787.0, 106.2], [786.0, 56.0], [789.0, 1988.8333333333333], [788.0, 71.0], [797.0, 1963.5000000000002], [796.0, 52.0], [795.0, 126.125], [792.0, 690.75], [775.0, 89.0909090909091], [774.0, 87.0], [773.0, 233.27272727272725], [772.0, 2840.6086956521744], [771.0, 70.71428571428572], [770.0, 1507.5925925925922], [769.0, 92.75], [768.0, 111.92857142857143], [783.0, 79.0], [782.0, 71.66666666666667], [781.0, 146.5], [780.0, 292.0], [779.0, 71.5], [777.0, 140.33333333333334], [776.0, 935.7692307692308], [791.0, 2914.777777777778], [790.0, 2945.8], [827.0, 5091.2], [817.0, 61.5], [830.0, 77.5], [831.0, 85.14285714285715], [816.0, 650.3157894736842], [829.0, 2129.6], [826.0, 2281.6], [807.0, 87.33333333333333], [806.0, 3711.470588235294], [805.0, 62.0], [804.0, 2263.4], [803.0, 77.4], [802.0, 106.0], [801.0, 3087.5555555555557], [800.0, 1455.3333333333335], [815.0, 2558.25], [814.0, 10897.0], [813.0, 77.18181818181819], [812.0, 589.4], [811.0, 69.28571428571429], [809.0, 4023.1000000000004], [808.0, 400.25], [823.0, 84.0], [822.0, 1514.0], [820.0, 78.91666666666667], [860.0, 2806.25], [863.0, 72.66666666666667], [848.0, 77.0], [851.0, 90.14285714285714], [850.0, 79.0], [853.0, 55.0], [852.0, 438.0357142857143], [862.0, 587.3333333333333], [861.0, 114.88888888888889], [859.0, 238.31578947368422], [858.0, 71.66666666666666], [857.0, 73.88888888888889], [856.0, 61.857142857142854], [847.0, 445.2], [832.0, 91.5], [834.0, 72.57142857142857], [833.0, 227.125], [837.0, 72.5], [836.0, 2505.8000000000006], [839.0, 108.69999999999999], [838.0, 72.0], [846.0, 82.27272727272727], [845.0, 1793.307692307692], [844.0, 55.0], [843.0, 60.42857142857143], [842.0, 110.88888888888889], [840.0, 2716.296296296296], [855.0, 65.66666666666667], [854.0, 57.5], [892.0, 4060.1], [895.0, 67.9], [880.0, 106.95652173913044], [883.0, 722.8666666666667], [881.0, 1028.5], [885.0, 76.09090909090908], [884.0, 90.5], [894.0, 77.0], [893.0, 67.8], [891.0, 2305.3076923076924], [890.0, 452.8125], [889.0, 84.0], [888.0, 373.83333333333337], [879.0, 73.68421052631577], [865.0, 3957.923076923077], [864.0, 3072.0909090909095], [867.0, 1415.0555555555554], [866.0, 91.42857142857143], [869.0, 3203.7], [868.0, 2211.333333333333], [871.0, 2209.529411764706], [870.0, 63.99999999999999], [878.0, 1498.857142857143], [877.0, 77.0], [875.0, 244.75], [874.0, 62.333333333333336], [887.0, 1165.8947368421057], [886.0, 709.4000000000001], [921.0, 47.333333333333336], [926.0, 126.42857142857143], [927.0, 86.83333333333334], [913.0, 1120.111111111111], [915.0, 77.28571428571429], [914.0, 102.11111111111111], [917.0, 1860.1666666666667], [916.0, 75.5], [924.0, 117.33333333333334], [923.0, 75.8], [922.0, 70.58823529411764], [920.0, 1789.0], [903.0, 71.0], [901.0, 94.5], [900.0, 65.125], [898.0, 2869.3225806451615], [897.0, 66.33333333333333], [896.0, 59.0], [911.0, 75.0], [910.0, 1429.3333333333333], [908.0, 89.6], [907.0, 83.33333333333333], [906.0, 133.4], [905.0, 1205.3333333333333], [904.0, 1099.7058823529412], [919.0, 1419.142857142857], [918.0, 62.333333333333336], [958.0, 299.06250000000006], [959.0, 278.5555555555556], [946.0, 80.23076923076924], [944.0, 80.5], [956.0, 86.8], [955.0, 2141.875], [954.0, 131.2], [953.0, 125.33333333333333], [943.0, 443.12499999999994], [931.0, 64.0], [928.0, 78.0], [934.0, 4246.642857142858], [933.0, 1962.2727272727275], [941.0, 3582.3846153846157], [939.0, 102.3076923076923], [938.0, 691.6000000000001], [937.0, 123.6], [936.0, 132.66666666666669], [951.0, 3428.0], [950.0, 89.0], [949.0, 3100.4166666666665], [948.0, 612.5454545454545], [985.0, 683.6785714285716], [989.0, 1114.7272727272727], [990.0, 1672.2857142857142], [976.0, 93.55555555555556], [978.0, 1260.2499999999998], [977.0, 64.5], [980.0, 1623.4], [979.0, 4332.5], [988.0, 85.5], [987.0, 4409.5], [986.0, 929.0], [984.0, 73.74999999999999], [967.0, 66.0], [966.0, 76.0], [965.0, 175.5], [964.0, 1449.4285714285713], [963.0, 1698.0], [962.0, 67.0], [961.0, 283.4], [960.0, 2491.2000000000003], [975.0, 82.28571428571428], [973.0, 3991.5999999999995], [972.0, 71.0], [971.0, 2133.5], [969.0, 107.57142857142857], [983.0, 157.25], [982.0, 563.0], [1020.0, 9621.0], [1023.0, 75.5], [1009.0, 110.22222222222223], [1008.0, 59.0], [1011.0, 3034.3], [1010.0, 1872.5517241379305], [1013.0, 80.0], [1012.0, 301.3529411764706], [1022.0, 83.0], [1021.0, 1003.5], [1019.0, 79.0], [1018.0, 816.0], [1017.0, 95.57142857142857], [1016.0, 706.0], [1007.0, 65.0], [992.0, 351.0], [997.0, 629.7741935483872], [995.0, 114.83333333333333], [999.0, 295.0], [998.0, 2444.1111111111113], [1006.0, 510.0], [1005.0, 1062.1000000000001], [1004.0, 380.80000000000007], [1003.0, 60.0], [1001.0, 214.84615384615387], [1000.0, 84.75], [1015.0, 67.0], [1014.0, 1903.5517241379305], [1084.0, 62.6], [1062.0, 122.8421052631579], [1086.0, 58.0], [1058.0, 70.5], [1060.0, 179.0], [1064.0, 67.33333333333333], [1066.0, 85.64285714285717], [1068.0, 1482.392857142857], [1070.0, 211.25], [1082.0, 77.5], [1080.0, 2025.75], [1076.0, 2225.8571428571427], [1074.0, 49.75], [1072.0, 79.0], [1024.0, 1745.4], [1028.0, 2873.3333333333335], [1030.0, 4241.700000000001], [1034.0, 147.5121951219512], [1038.0, 1473.0], [1036.0, 315.2631578947368], [1052.0, 303.7142857142858], [1050.0, 61.333333333333336], [1048.0, 76.33333333333333], [1046.0, 132.66666666666666], [1044.0, 438.0], [1040.0, 67.0], [1148.0, 316.06666666666666], [1138.0, 73.0], [1120.0, 521.3617021276599], [1122.0, 80.55555555555556], [1124.0, 379.1333333333333], [1126.0, 1147.7999999999997], [1130.0, 132.0], [1132.0, 6564.25], [1134.0, 199.31578947368422], [1150.0, 2091.523809523809], [1146.0, 72.0], [1142.0, 553.2105263157895], [1140.0, 139.75], [1136.0, 3197.818181818182], [1118.0, 73.0], [1088.0, 138.4], [1090.0, 2797.666666666666], [1094.0, 747.1538461538462], [1096.0, 89.28571428571428], [1102.0, 1263.0454545454547], [1116.0, 766.9259259259258], [1114.0, 77.0], [1112.0, 103.15384615384615], [1110.0, 81.0], [1108.0, 244.66666666666669], [1104.0, 47.0], [1202.0, 1502.5], [1204.0, 908.0526315789473], [1190.0, 1735.04], [1212.0, 91.25], [1186.0, 160.7], [1194.0, 161.4], [1196.0, 86.0], [1198.0, 1781.4], [1214.0, 599.1818181818182], [1208.0, 86.0], [1206.0, 72.5], [1152.0, 2113.0], [1156.0, 437.4705882352941], [1158.0, 80.0], [1162.0, 1386.8333333333333], [1164.0, 1674.52], [1166.0, 125.2], [1182.0, 2345.0], [1180.0, 476.6666666666666], [1178.0, 223.83333333333334], [1176.0, 1392.0000000000002], [1174.0, 179.66666666666666], [1272.0, 1944.75], [1254.0, 89.0], [1276.0, 1884.4615384615386], [1250.0, 538.5925925925925], [1252.0, 941.8888888888889], [1256.0, 982.0714285714284], [1258.0, 1218.5], [1278.0, 655.4166666666667], [1274.0, 1847.25], [1268.0, 2161.5555555555557], [1266.0, 1582.5], [1264.0, 609.8333333333333], [1216.0, 81.0], [1218.0, 1631.5333333333333], [1220.0, 628.4], [1222.0, 2340.0], [1224.0, 297.7692307692307], [1226.0, 7799.0], [1228.0, 1297.545454545455], [1246.0, 383.33333333333337], [1244.0, 612.7333333333332], [1242.0, 141.39999999999998], [1240.0, 118.16666666666667], [1238.0, 7729.0], [1236.0, 2718.4], [1234.0, 915.4838709677421], [1232.0, 547.9999999999998], [1336.0, 582.6], [1330.0, 5613.0], [1312.0, 1021.0999999999999], [1314.0, 241.4], [1316.0, 2074.25], [1318.0, 1876.5294117647059], [1320.0, 1674.764705882353], [1322.0, 1043.4242424242423], [1324.0, 152.5], [1326.0, 652.2727272727274], [1342.0, 836.875], [1334.0, 1902.4285714285713], [1332.0, 1196.6249999999998], [1328.0, 141.16666666666669], [1280.0, 881.0000000000001], [1282.0, 76.16666666666666], [1284.0, 339.0], [1286.0, 965.9473684210526], [1288.0, 1662.2000000000003], [1292.0, 435.0], [1294.0, 1157.5000000000002], [1310.0, 136.0], [1308.0, 441.1052631578947], [1306.0, 382.6666666666667], [1304.0, 98.0], [1302.0, 3520.5], [1300.0, 157.75], [1298.0, 2075.166666666667], [1296.0, 165.0], [1398.0, 854.3417721518987], [1384.0, 942.0074074074074], [1400.0, 728.1213114754095], [1376.0, 1019.7500000000002], [1378.0, 107.94117647058822], [1380.0, 688.1511627906976], [1382.0, 1480.5161290322583], [1386.0, 1332.4414414414414], [1388.0, 1315.7857142857147], [1396.0, 880.7678571428571], [1394.0, 1114.6862745098038], [1392.0, 1852.20253164557], [1358.0, 603.0], [1356.0, 1124.3958333333337], [1354.0, 799.3684210526316], [1352.0, 448.2244897959183], [1350.0, 644.4999999999999], [1348.0, 188.0], [1346.0, 1290.25], [1344.0, 1208.5], [1374.0, 90.25], [1372.0, 2300.8461538461534], [1370.0, 740.1578947368421], [1368.0, 1689.1923076923076], [1366.0, 279.6190476190476], [1364.0, 1146.1379310344828], [1362.0, 1015.2222222222222], [1360.0, 739.8947368421052], [1390.0, 1787.875], [1057.0, 77.33333333333333], [1083.0, 1185.1090909090906], [1059.0, 218.54545454545456], [1061.0, 60.333333333333336], [1065.0, 67.0], [1069.0, 1210.875], [1071.0, 76.0], [1085.0, 58.0], [1077.0, 268.2857142857143], [1075.0, 1065.3333333333333], [1073.0, 807.2051282051283], [1055.0, 75.11111111111111], [1027.0, 200.83333333333337], [1031.0, 2501.0], [1033.0, 884.3636363636363], [1053.0, 65.0], [1051.0, 104.66666666666666], [1049.0, 2875.3333333333335], [1047.0, 2824.333333333333], [1043.0, 3618.0], [1041.0, 2672.590909090909], [1145.0, 141.375], [1147.0, 76.66666666666667], [1151.0, 200.55555555555554], [1121.0, 543.1666666666666], [1123.0, 713.5], [1125.0, 73.23076923076923], [1129.0, 1484.5714285714287], [1127.0, 56.5], [1131.0, 2580.714285714286], [1133.0, 134.0], [1135.0, 81.66666666666667], [1143.0, 730.1600000000001], [1141.0, 1337.7777777777778], [1139.0, 720.7250000000004], [1137.0, 2109.714285714286], [1091.0, 68.85714285714285], [1095.0, 71.28571428571429], [1097.0, 92.18181818181819], [1101.0, 303.0], [1099.0, 642.9000000000002], [1103.0, 3128.428571428571], [1115.0, 747.2142857142857], [1111.0, 78.5], [1109.0, 76.6], [1107.0, 832.4166666666667], [1105.0, 204.0], [1213.0, 1112.8529411764707], [1215.0, 2245.25], [1185.0, 1394.8124999999998], [1189.0, 1170.3846153846155], [1187.0, 106.75], [1193.0, 272.00000000000006], [1195.0, 553.3684210526316], [1197.0, 2431.5], [1199.0, 815.2222222222222], [1209.0, 743.3333333333334], [1201.0, 1176.4], [1183.0, 4547.5], [1153.0, 90.0], [1155.0, 436.4117647058823], [1159.0, 1612.2], [1161.0, 2448.3571428571427], [1163.0, 97.33333333333333], [1167.0, 109.71428571428571], [1179.0, 139.0], [1177.0, 817.5454545454546], [1175.0, 1288.7142857142858], [1173.0, 905.7777777777778], [1171.0, 1339.7105263157894], [1169.0, 783.5999999999999], [1275.0, 1110.7142857142858], [1271.0, 1669.3461538461538], [1279.0, 532.9999999999999], [1249.0, 962.3333333333334], [1251.0, 231.66666666666666], [1253.0, 129.0], [1255.0, 1927.2500000000002], [1257.0, 520.8499999999999], [1259.0, 567.5666666666666], [1263.0, 1784.5], [1261.0, 2085.4406779661012], [1277.0, 474.31578947368416], [1267.0, 1450.9272727272728], [1247.0, 480.9333333333335], [1217.0, 969.4444444444445], [1219.0, 182.33333333333334], [1221.0, 815.6666666666667], [1223.0, 1560.7708333333333], [1227.0, 455.30769230769243], [1229.0, 1913.5], [1245.0, 143.12], [1243.0, 2290.0909090909095], [1241.0, 1217.714285714286], [1239.0, 549.3888888888889], [1233.0, 245.0], [1339.0, 1656.0], [1343.0, 87.5], [1313.0, 2457.0], [1315.0, 1382.9125000000004], [1317.0, 735.25], [1319.0, 1969.2105263157894], [1321.0, 2004.3749999999998], [1323.0, 2167.823529411765], [1325.0, 1311.3548387096769], [1327.0, 78.5], [1341.0, 746.0769230769231], [1337.0, 691.4210526315788], [1335.0, 1047.923076923077], [1333.0, 1714.3870967741932], [1331.0, 287.5], [1329.0, 327.1875], [1311.0, 1009.8333333333334], [1281.0, 2017.8571428571431], [1283.0, 870.7272727272727], [1285.0, 2029.6399999999994], [1287.0, 1492.4444444444453], [1289.0, 67.66666666666667], [1293.0, 498.2], [1295.0, 557.5], [1309.0, 846.6923076923075], [1307.0, 545.0], [1305.0, 248.66666666666669], [1303.0, 230.25], [1301.0, 2409.25], [1299.0, 168.6], [1297.0, 1365.125], [1397.0, 1210.6408163265316], [1377.0, 178.875], [1379.0, 1395.2799999999997], [1381.0, 1038.6500000000003], [1383.0, 950.4587155963305], [1385.0, 1195.5683229813662], [1387.0, 1999.7666666666664], [1389.0, 1591.6063829787224], [1399.0, 973.5641025641024], [1395.0, 1248.5454545454545], [1393.0, 1369.5419161676646], [1359.0, 1085.0], [1357.0, 2436.7083333333335], [1355.0, 84.0], [1353.0, 1307.717391304348], [1351.0, 1051.6875], [1349.0, 1824.2631578947369], [1347.0, 206.0], [1345.0, 2066.6666666666665], [1375.0, 1838.1666666666665], [1373.0, 1189.6111111111109], [1371.0, 1473.661290322581], [1369.0, 690.9756097560974], [1367.0, 517.7307692307694], [1363.0, 1385.8181818181815], [1361.0, 334.0], [1391.0, 1566.0476190476193], [1.0, 4696.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[884.2731428571439, 1208.9861428571378]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1400.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 18257.4, "minX": 1.7148312E12, "maxY": 138249.93333333332, "series": [{"data": [[1.71483126E12, 138249.93333333332], [1.7148312E12, 130723.4]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.71483126E12, 19309.266666666666], [1.7148312E12, 18257.4]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71483126E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1116.361992945323, "minX": 1.7148312E12, "maxY": 1296.5646192329073, "series": [{"data": [[1.71483126E12, 1296.5646192329073], [1.7148312E12, 1116.361992945323]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71483126E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1116.3348030570241, "minX": 1.7148312E12, "maxY": 1296.5558643690963, "series": [{"data": [[1.71483126E12, 1296.5558643690963], [1.7148312E12, 1116.3348030570241]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71483126E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 431.37965536408984, "minX": 1.7148312E12, "maxY": 566.6287477954157, "series": [{"data": [[1.71483126E12, 431.37965536408984], [1.7148312E12, 566.6287477954157]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71483126E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 33.0, "minX": 1.7148312E12, "maxY": 28113.0, "series": [{"data": [[1.71483126E12, 28113.0], [1.7148312E12, 9668.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.71483126E12, 5629.500000000001], [1.7148312E12, 3821.5]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.71483126E12, 15640.119999999999], [1.7148312E12, 8039.849999999996]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.71483126E12, 9774.15], [1.7148312E12, 5540.5]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.71483126E12, 33.0], [1.7148312E12, 37.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.71483126E12, 66.0], [1.7148312E12, 122.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71483126E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 39.5, "minX": 4.0, "maxY": 624.5, "series": [{"data": [[519.0, 60.0], [611.0, 62.0], [642.0, 494.5], [684.0, 624.5], [54.0, 56.0], [900.0, 73.0], [987.0, 139.0], [1000.0, 169.0], [1010.0, 78.0], [1006.0, 78.0], [1005.0, 76.0], [1023.0, 76.0], [1047.0, 104.0], [1030.0, 91.0], [4.0, 39.5], [125.0, 57.0], [8.0, 52.0], [10.0, 54.0], [206.0, 56.0], [204.0, 59.0], [291.0, 57.0], [337.0, 57.0], [355.0, 57.0], [404.0, 139.5], [28.0, 60.5], [500.0, 58.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1047.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 39.5, "minX": 4.0, "maxY": 624.5, "series": [{"data": [[519.0, 60.0], [611.0, 62.0], [642.0, 494.5], [684.0, 624.5], [54.0, 56.0], [900.0, 73.0], [987.0, 139.0], [1000.0, 169.0], [1010.0, 78.0], [1006.0, 78.0], [1005.0, 76.0], [1023.0, 76.0], [1047.0, 104.0], [1030.0, 91.0], [4.0, 39.5], [125.0, 57.0], [8.0, 52.0], [10.0, 54.0], [206.0, 56.0], [204.0, 59.0], [291.0, 57.0], [337.0, 57.0], [355.0, 57.0], [404.0, 139.5], [28.0, 60.5], [500.0, 58.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1047.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 103.31666666666666, "minX": 1.7148312E12, "maxY": 130.01666666666668, "series": [{"data": [[1.71483126E12, 103.31666666666666], [1.7148312E12, 130.01666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71483126E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 113.4, "minX": 1.7148312E12, "maxY": 119.93333333333334, "series": [{"data": [[1.71483126E12, 119.93333333333334], [1.7148312E12, 113.4]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71483126E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 113.4, "minX": 1.7148312E12, "maxY": 119.93333333333334, "series": [{"data": [[1.71483126E12, 119.93333333333334], [1.7148312E12, 113.4]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71483126E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 113.4, "minX": 1.7148312E12, "maxY": 119.93333333333334, "series": [{"data": [[1.71483126E12, 119.93333333333334], [1.7148312E12, 113.4]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71483126E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

